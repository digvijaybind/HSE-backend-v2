
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Investor
 * 
 */
export type Investor = $Result.DefaultSelection<Prisma.$InvestorPayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model Property
 * 
 */
export type Property = $Result.DefaultSelection<Prisma.$PropertyPayload>
/**
 * Model PropertyInvestor
 * 
 */
export type PropertyInvestor = $Result.DefaultSelection<Prisma.$PropertyInvestorPayload>
/**
 * Model Bookmark
 * 
 */
export type Bookmark = $Result.DefaultSelection<Prisma.$BookmarkPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AnnualIncomeRange: {
  ZeroToTwoFiftyThousandINR: 'ZeroToTwoFiftyThousandINR',
  TwoFiftyThousandOneToFiveHundredThousandINR: 'TwoFiftyThousandOneToFiveHundredThousandINR',
  FiveHundredThousandOneToHundredThousandINR: 'FiveHundredThousandOneToHundredThousandINR',
  MoreThanHundredThousandINR: 'MoreThanHundredThousandINR'
};

export type AnnualIncomeRange = (typeof AnnualIncomeRange)[keyof typeof AnnualIncomeRange]


export const Role: {
  ADMIN: 'ADMIN',
  INVESTOR: 'INVESTOR'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type AnnualIncomeRange = $Enums.AnnualIncomeRange

export const AnnualIncomeRange: typeof $Enums.AnnualIncomeRange

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Investors
 * const investors = await prisma.investor.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Investors
   * const investors = await prisma.investor.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.investor`: Exposes CRUD operations for the **Investor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Investors
    * const investors = await prisma.investor.findMany()
    * ```
    */
  get investor(): Prisma.InvestorDelegate<ExtArgs>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs>;

  /**
   * `prisma.property`: Exposes CRUD operations for the **Property** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Properties
    * const properties = await prisma.property.findMany()
    * ```
    */
  get property(): Prisma.PropertyDelegate<ExtArgs>;

  /**
   * `prisma.propertyInvestor`: Exposes CRUD operations for the **PropertyInvestor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PropertyInvestors
    * const propertyInvestors = await prisma.propertyInvestor.findMany()
    * ```
    */
  get propertyInvestor(): Prisma.PropertyInvestorDelegate<ExtArgs>;

  /**
   * `prisma.bookmark`: Exposes CRUD operations for the **Bookmark** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookmarks
    * const bookmarks = await prisma.bookmark.findMany()
    * ```
    */
  get bookmark(): Prisma.BookmarkDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.0
   * Query Engine version: 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Investor: 'Investor',
    Admin: 'Admin',
    Property: 'Property',
    PropertyInvestor: 'PropertyInvestor',
    Bookmark: 'Bookmark'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'investor' | 'admin' | 'property' | 'propertyInvestor' | 'bookmark'
      txIsolationLevel: never
    },
    model: {
      Investor: {
        payload: Prisma.$InvestorPayload<ExtArgs>
        fields: Prisma.InvestorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InvestorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InvestorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload>
          }
          findFirst: {
            args: Prisma.InvestorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InvestorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload>
          }
          findMany: {
            args: Prisma.InvestorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload>[]
          }
          create: {
            args: Prisma.InvestorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload>
          }
          createMany: {
            args: Prisma.InvestorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InvestorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload>
          }
          update: {
            args: Prisma.InvestorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload>
          }
          deleteMany: {
            args: Prisma.InvestorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InvestorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InvestorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InvestorPayload>
          }
          aggregate: {
            args: Prisma.InvestorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInvestor>
          }
          groupBy: {
            args: Prisma.InvestorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InvestorGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.InvestorFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.InvestorAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.InvestorCountArgs<ExtArgs>,
            result: $Utils.Optional<InvestorCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.AdminFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.AdminAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>,
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      Property: {
        payload: Prisma.$PropertyPayload<ExtArgs>
        fields: Prisma.PropertyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PropertyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PropertyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          findFirst: {
            args: Prisma.PropertyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PropertyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          findMany: {
            args: Prisma.PropertyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>[]
          }
          create: {
            args: Prisma.PropertyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          createMany: {
            args: Prisma.PropertyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PropertyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          update: {
            args: Prisma.PropertyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          deleteMany: {
            args: Prisma.PropertyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PropertyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PropertyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyPayload>
          }
          aggregate: {
            args: Prisma.PropertyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProperty>
          }
          groupBy: {
            args: Prisma.PropertyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PropertyGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.PropertyFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.PropertyAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.PropertyCountArgs<ExtArgs>,
            result: $Utils.Optional<PropertyCountAggregateOutputType> | number
          }
        }
      }
      PropertyInvestor: {
        payload: Prisma.$PropertyInvestorPayload<ExtArgs>
        fields: Prisma.PropertyInvestorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PropertyInvestorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyInvestorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PropertyInvestorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyInvestorPayload>
          }
          findFirst: {
            args: Prisma.PropertyInvestorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyInvestorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PropertyInvestorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyInvestorPayload>
          }
          findMany: {
            args: Prisma.PropertyInvestorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyInvestorPayload>[]
          }
          create: {
            args: Prisma.PropertyInvestorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyInvestorPayload>
          }
          createMany: {
            args: Prisma.PropertyInvestorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PropertyInvestorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyInvestorPayload>
          }
          update: {
            args: Prisma.PropertyInvestorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyInvestorPayload>
          }
          deleteMany: {
            args: Prisma.PropertyInvestorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PropertyInvestorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PropertyInvestorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PropertyInvestorPayload>
          }
          aggregate: {
            args: Prisma.PropertyInvestorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePropertyInvestor>
          }
          groupBy: {
            args: Prisma.PropertyInvestorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PropertyInvestorGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.PropertyInvestorFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.PropertyInvestorAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.PropertyInvestorCountArgs<ExtArgs>,
            result: $Utils.Optional<PropertyInvestorCountAggregateOutputType> | number
          }
        }
      }
      Bookmark: {
        payload: Prisma.$BookmarkPayload<ExtArgs>
        fields: Prisma.BookmarkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookmarkFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookmarkFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          findFirst: {
            args: Prisma.BookmarkFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookmarkFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          findMany: {
            args: Prisma.BookmarkFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>[]
          }
          create: {
            args: Prisma.BookmarkCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          createMany: {
            args: Prisma.BookmarkCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BookmarkDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          update: {
            args: Prisma.BookmarkUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          deleteMany: {
            args: Prisma.BookmarkDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BookmarkUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BookmarkUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          aggregate: {
            args: Prisma.BookmarkAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBookmark>
          }
          groupBy: {
            args: Prisma.BookmarkGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BookmarkGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.BookmarkFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.BookmarkAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.BookmarkCountArgs<ExtArgs>,
            result: $Utils.Optional<BookmarkCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type InvestorCountOutputType
   */

  export type InvestorCountOutputType = {
    properties: number
    bookmarks: number
  }

  export type InvestorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    properties?: boolean | InvestorCountOutputTypeCountPropertiesArgs
    bookmarks?: boolean | InvestorCountOutputTypeCountBookmarksArgs
  }

  // Custom InputTypes
  /**
   * InvestorCountOutputType without action
   */
  export type InvestorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InvestorCountOutputType
     */
    select?: InvestorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InvestorCountOutputType without action
   */
  export type InvestorCountOutputTypeCountPropertiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyInvestorWhereInput
  }

  /**
   * InvestorCountOutputType without action
   */
  export type InvestorCountOutputTypeCountBookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkWhereInput
  }


  /**
   * Count Type PropertyCountOutputType
   */

  export type PropertyCountOutputType = {
    investors: number
    bookmarks: number
  }

  export type PropertyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    investors?: boolean | PropertyCountOutputTypeCountInvestorsArgs
    bookmarks?: boolean | PropertyCountOutputTypeCountBookmarksArgs
  }

  // Custom InputTypes
  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyCountOutputType
     */
    select?: PropertyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeCountInvestorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyInvestorWhereInput
  }

  /**
   * PropertyCountOutputType without action
   */
  export type PropertyCountOutputTypeCountBookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Investor
   */

  export type AggregateInvestor = {
    _count: InvestorCountAggregateOutputType | null
    _min: InvestorMinAggregateOutputType | null
    _max: InvestorMaxAggregateOutputType | null
  }

  export type InvestorMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    emailId: string | null
    mobileNumber: string | null
    dateofBirth: Date | null
    password: string | null
    emailVerified: boolean | null
    phoneNumberVerified: boolean | null
    selfieImagePath: string | null
    addressImagePath: string | null
    employmentImagePath: string | null
    additionalDocumentImagePath: string | null
    industry: string | null
    organization: string | null
    roleAtWork: string | null
    workingDuration: string | null
    incomeRange: $Enums.AnnualIncomeRange | null
    profileUserImagePath: string | null
    investmentPreference: string | null
    addressOne: string | null
    addressTwo: string | null
    addressThree: string | null
    pinCode: string | null
    state: string | null
    city: string | null
    accountDeactivate: boolean | null
    receiveNotification: boolean | null
    payMentMethod: string | null
    role: $Enums.Role | null
    fundsAvailable: string | null
    expoPushToken: string | null
  }

  export type InvestorMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    emailId: string | null
    mobileNumber: string | null
    dateofBirth: Date | null
    password: string | null
    emailVerified: boolean | null
    phoneNumberVerified: boolean | null
    selfieImagePath: string | null
    addressImagePath: string | null
    employmentImagePath: string | null
    additionalDocumentImagePath: string | null
    industry: string | null
    organization: string | null
    roleAtWork: string | null
    workingDuration: string | null
    incomeRange: $Enums.AnnualIncomeRange | null
    profileUserImagePath: string | null
    investmentPreference: string | null
    addressOne: string | null
    addressTwo: string | null
    addressThree: string | null
    pinCode: string | null
    state: string | null
    city: string | null
    accountDeactivate: boolean | null
    receiveNotification: boolean | null
    payMentMethod: string | null
    role: $Enums.Role | null
    fundsAvailable: string | null
    expoPushToken: string | null
  }

  export type InvestorCountAggregateOutputType = {
    id: number
    fullName: number
    emailId: number
    mobileNumber: number
    dateofBirth: number
    password: number
    emailVerified: number
    phoneNumberVerified: number
    selfieImagePath: number
    addressImagePath: number
    employmentImagePath: number
    additionalDocumentImagePath: number
    industry: number
    organization: number
    roleAtWork: number
    workingDuration: number
    incomeRange: number
    profileUserImagePath: number
    investmentPreference: number
    addressOne: number
    addressTwo: number
    addressThree: number
    pinCode: number
    state: number
    city: number
    accountDeactivate: number
    receiveNotification: number
    payMentMethod: number
    role: number
    fundsAvailable: number
    expoPushToken: number
    _all: number
  }


  export type InvestorMinAggregateInputType = {
    id?: true
    fullName?: true
    emailId?: true
    mobileNumber?: true
    dateofBirth?: true
    password?: true
    emailVerified?: true
    phoneNumberVerified?: true
    selfieImagePath?: true
    addressImagePath?: true
    employmentImagePath?: true
    additionalDocumentImagePath?: true
    industry?: true
    organization?: true
    roleAtWork?: true
    workingDuration?: true
    incomeRange?: true
    profileUserImagePath?: true
    investmentPreference?: true
    addressOne?: true
    addressTwo?: true
    addressThree?: true
    pinCode?: true
    state?: true
    city?: true
    accountDeactivate?: true
    receiveNotification?: true
    payMentMethod?: true
    role?: true
    fundsAvailable?: true
    expoPushToken?: true
  }

  export type InvestorMaxAggregateInputType = {
    id?: true
    fullName?: true
    emailId?: true
    mobileNumber?: true
    dateofBirth?: true
    password?: true
    emailVerified?: true
    phoneNumberVerified?: true
    selfieImagePath?: true
    addressImagePath?: true
    employmentImagePath?: true
    additionalDocumentImagePath?: true
    industry?: true
    organization?: true
    roleAtWork?: true
    workingDuration?: true
    incomeRange?: true
    profileUserImagePath?: true
    investmentPreference?: true
    addressOne?: true
    addressTwo?: true
    addressThree?: true
    pinCode?: true
    state?: true
    city?: true
    accountDeactivate?: true
    receiveNotification?: true
    payMentMethod?: true
    role?: true
    fundsAvailable?: true
    expoPushToken?: true
  }

  export type InvestorCountAggregateInputType = {
    id?: true
    fullName?: true
    emailId?: true
    mobileNumber?: true
    dateofBirth?: true
    password?: true
    emailVerified?: true
    phoneNumberVerified?: true
    selfieImagePath?: true
    addressImagePath?: true
    employmentImagePath?: true
    additionalDocumentImagePath?: true
    industry?: true
    organization?: true
    roleAtWork?: true
    workingDuration?: true
    incomeRange?: true
    profileUserImagePath?: true
    investmentPreference?: true
    addressOne?: true
    addressTwo?: true
    addressThree?: true
    pinCode?: true
    state?: true
    city?: true
    accountDeactivate?: true
    receiveNotification?: true
    payMentMethod?: true
    role?: true
    fundsAvailable?: true
    expoPushToken?: true
    _all?: true
  }

  export type InvestorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Investor to aggregate.
     */
    where?: InvestorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Investors to fetch.
     */
    orderBy?: InvestorOrderByWithRelationInput | InvestorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InvestorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Investors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Investors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Investors
    **/
    _count?: true | InvestorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InvestorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InvestorMaxAggregateInputType
  }

  export type GetInvestorAggregateType<T extends InvestorAggregateArgs> = {
        [P in keyof T & keyof AggregateInvestor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvestor[P]>
      : GetScalarType<T[P], AggregateInvestor[P]>
  }




  export type InvestorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InvestorWhereInput
    orderBy?: InvestorOrderByWithAggregationInput | InvestorOrderByWithAggregationInput[]
    by: InvestorScalarFieldEnum[] | InvestorScalarFieldEnum
    having?: InvestorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InvestorCountAggregateInputType | true
    _min?: InvestorMinAggregateInputType
    _max?: InvestorMaxAggregateInputType
  }

  export type InvestorGroupByOutputType = {
    id: string
    fullName: string
    emailId: string
    mobileNumber: string
    dateofBirth: Date
    password: string | null
    emailVerified: boolean
    phoneNumberVerified: boolean
    selfieImagePath: string | null
    addressImagePath: string | null
    employmentImagePath: string | null
    additionalDocumentImagePath: string | null
    industry: string | null
    organization: string | null
    roleAtWork: string | null
    workingDuration: string | null
    incomeRange: $Enums.AnnualIncomeRange | null
    profileUserImagePath: string | null
    investmentPreference: string | null
    addressOne: string | null
    addressTwo: string | null
    addressThree: string | null
    pinCode: string | null
    state: string | null
    city: string | null
    accountDeactivate: boolean
    receiveNotification: boolean
    payMentMethod: string
    role: $Enums.Role
    fundsAvailable: string
    expoPushToken: string | null
    _count: InvestorCountAggregateOutputType | null
    _min: InvestorMinAggregateOutputType | null
    _max: InvestorMaxAggregateOutputType | null
  }

  type GetInvestorGroupByPayload<T extends InvestorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InvestorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InvestorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InvestorGroupByOutputType[P]>
            : GetScalarType<T[P], InvestorGroupByOutputType[P]>
        }
      >
    >


  export type InvestorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    emailId?: boolean
    mobileNumber?: boolean
    dateofBirth?: boolean
    password?: boolean
    emailVerified?: boolean
    phoneNumberVerified?: boolean
    selfieImagePath?: boolean
    addressImagePath?: boolean
    employmentImagePath?: boolean
    additionalDocumentImagePath?: boolean
    industry?: boolean
    organization?: boolean
    roleAtWork?: boolean
    workingDuration?: boolean
    incomeRange?: boolean
    profileUserImagePath?: boolean
    investmentPreference?: boolean
    addressOne?: boolean
    addressTwo?: boolean
    addressThree?: boolean
    pinCode?: boolean
    state?: boolean
    city?: boolean
    accountDeactivate?: boolean
    receiveNotification?: boolean
    payMentMethod?: boolean
    role?: boolean
    fundsAvailable?: boolean
    expoPushToken?: boolean
    properties?: boolean | Investor$propertiesArgs<ExtArgs>
    bookmarks?: boolean | Investor$bookmarksArgs<ExtArgs>
    _count?: boolean | InvestorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["investor"]>


  export type InvestorSelectScalar = {
    id?: boolean
    fullName?: boolean
    emailId?: boolean
    mobileNumber?: boolean
    dateofBirth?: boolean
    password?: boolean
    emailVerified?: boolean
    phoneNumberVerified?: boolean
    selfieImagePath?: boolean
    addressImagePath?: boolean
    employmentImagePath?: boolean
    additionalDocumentImagePath?: boolean
    industry?: boolean
    organization?: boolean
    roleAtWork?: boolean
    workingDuration?: boolean
    incomeRange?: boolean
    profileUserImagePath?: boolean
    investmentPreference?: boolean
    addressOne?: boolean
    addressTwo?: boolean
    addressThree?: boolean
    pinCode?: boolean
    state?: boolean
    city?: boolean
    accountDeactivate?: boolean
    receiveNotification?: boolean
    payMentMethod?: boolean
    role?: boolean
    fundsAvailable?: boolean
    expoPushToken?: boolean
  }

  export type InvestorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    properties?: boolean | Investor$propertiesArgs<ExtArgs>
    bookmarks?: boolean | Investor$bookmarksArgs<ExtArgs>
    _count?: boolean | InvestorCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $InvestorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Investor"
    objects: {
      properties: Prisma.$PropertyInvestorPayload<ExtArgs>[]
      bookmarks: Prisma.$BookmarkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      emailId: string
      mobileNumber: string
      dateofBirth: Date
      password: string | null
      emailVerified: boolean
      phoneNumberVerified: boolean
      selfieImagePath: string | null
      addressImagePath: string | null
      employmentImagePath: string | null
      additionalDocumentImagePath: string | null
      industry: string | null
      organization: string | null
      roleAtWork: string | null
      workingDuration: string | null
      incomeRange: $Enums.AnnualIncomeRange | null
      profileUserImagePath: string | null
      investmentPreference: string | null
      addressOne: string | null
      addressTwo: string | null
      addressThree: string | null
      pinCode: string | null
      state: string | null
      city: string | null
      accountDeactivate: boolean
      receiveNotification: boolean
      payMentMethod: string
      role: $Enums.Role
      fundsAvailable: string
      expoPushToken: string | null
    }, ExtArgs["result"]["investor"]>
    composites: {}
  }

  type InvestorGetPayload<S extends boolean | null | undefined | InvestorDefaultArgs> = $Result.GetResult<Prisma.$InvestorPayload, S>

  type InvestorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InvestorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InvestorCountAggregateInputType | true
    }

  export interface InvestorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Investor'], meta: { name: 'Investor' } }
    /**
     * Find zero or one Investor that matches the filter.
     * @param {InvestorFindUniqueArgs} args - Arguments to find a Investor
     * @example
     * // Get one Investor
     * const investor = await prisma.investor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InvestorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InvestorFindUniqueArgs<ExtArgs>>
    ): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Investor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InvestorFindUniqueOrThrowArgs} args - Arguments to find a Investor
     * @example
     * // Get one Investor
     * const investor = await prisma.investor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InvestorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvestorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Investor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestorFindFirstArgs} args - Arguments to find a Investor
     * @example
     * // Get one Investor
     * const investor = await prisma.investor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InvestorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InvestorFindFirstArgs<ExtArgs>>
    ): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Investor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestorFindFirstOrThrowArgs} args - Arguments to find a Investor
     * @example
     * // Get one Investor
     * const investor = await prisma.investor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InvestorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InvestorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Investors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Investors
     * const investors = await prisma.investor.findMany()
     * 
     * // Get first 10 Investors
     * const investors = await prisma.investor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const investorWithIdOnly = await prisma.investor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends InvestorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvestorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Investor.
     * @param {InvestorCreateArgs} args - Arguments to create a Investor.
     * @example
     * // Create one Investor
     * const Investor = await prisma.investor.create({
     *   data: {
     *     // ... data to create a Investor
     *   }
     * })
     * 
    **/
    create<T extends InvestorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InvestorCreateArgs<ExtArgs>>
    ): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Investors.
     * @param {InvestorCreateManyArgs} args - Arguments to create many Investors.
     * @example
     * // Create many Investors
     * const investor = await prisma.investor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends InvestorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvestorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Investor.
     * @param {InvestorDeleteArgs} args - Arguments to delete one Investor.
     * @example
     * // Delete one Investor
     * const Investor = await prisma.investor.delete({
     *   where: {
     *     // ... filter to delete one Investor
     *   }
     * })
     * 
    **/
    delete<T extends InvestorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InvestorDeleteArgs<ExtArgs>>
    ): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Investor.
     * @param {InvestorUpdateArgs} args - Arguments to update one Investor.
     * @example
     * // Update one Investor
     * const investor = await prisma.investor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InvestorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InvestorUpdateArgs<ExtArgs>>
    ): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Investors.
     * @param {InvestorDeleteManyArgs} args - Arguments to filter Investors to delete.
     * @example
     * // Delete a few Investors
     * const { count } = await prisma.investor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InvestorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InvestorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Investors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Investors
     * const investor = await prisma.investor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InvestorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InvestorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Investor.
     * @param {InvestorUpsertArgs} args - Arguments to update or create a Investor.
     * @example
     * // Update or create a Investor
     * const investor = await prisma.investor.upsert({
     *   create: {
     *     // ... data to create a Investor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Investor we want to update
     *   }
     * })
    **/
    upsert<T extends InvestorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InvestorUpsertArgs<ExtArgs>>
    ): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Investors that matches the filter.
     * @param {InvestorFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const investor = await prisma.investor.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: InvestorFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Investor.
     * @param {InvestorAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const investor = await prisma.investor.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: InvestorAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Investors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestorCountArgs} args - Arguments to filter Investors to count.
     * @example
     * // Count the number of Investors
     * const count = await prisma.investor.count({
     *   where: {
     *     // ... the filter for the Investors we want to count
     *   }
     * })
    **/
    count<T extends InvestorCountArgs>(
      args?: Subset<T, InvestorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InvestorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Investor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InvestorAggregateArgs>(args: Subset<T, InvestorAggregateArgs>): Prisma.PrismaPromise<GetInvestorAggregateType<T>>

    /**
     * Group by Investor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InvestorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InvestorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InvestorGroupByArgs['orderBy'] }
        : { orderBy?: InvestorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InvestorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInvestorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Investor model
   */
  readonly fields: InvestorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Investor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InvestorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    properties<T extends Investor$propertiesArgs<ExtArgs> = {}>(args?: Subset<T, Investor$propertiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyInvestorPayload<ExtArgs>, T, 'findMany'> | Null>;

    bookmarks<T extends Investor$bookmarksArgs<ExtArgs> = {}>(args?: Subset<T, Investor$bookmarksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Investor model
   */ 
  interface InvestorFieldRefs {
    readonly id: FieldRef<"Investor", 'String'>
    readonly fullName: FieldRef<"Investor", 'String'>
    readonly emailId: FieldRef<"Investor", 'String'>
    readonly mobileNumber: FieldRef<"Investor", 'String'>
    readonly dateofBirth: FieldRef<"Investor", 'DateTime'>
    readonly password: FieldRef<"Investor", 'String'>
    readonly emailVerified: FieldRef<"Investor", 'Boolean'>
    readonly phoneNumberVerified: FieldRef<"Investor", 'Boolean'>
    readonly selfieImagePath: FieldRef<"Investor", 'String'>
    readonly addressImagePath: FieldRef<"Investor", 'String'>
    readonly employmentImagePath: FieldRef<"Investor", 'String'>
    readonly additionalDocumentImagePath: FieldRef<"Investor", 'String'>
    readonly industry: FieldRef<"Investor", 'String'>
    readonly organization: FieldRef<"Investor", 'String'>
    readonly roleAtWork: FieldRef<"Investor", 'String'>
    readonly workingDuration: FieldRef<"Investor", 'String'>
    readonly incomeRange: FieldRef<"Investor", 'AnnualIncomeRange'>
    readonly profileUserImagePath: FieldRef<"Investor", 'String'>
    readonly investmentPreference: FieldRef<"Investor", 'String'>
    readonly addressOne: FieldRef<"Investor", 'String'>
    readonly addressTwo: FieldRef<"Investor", 'String'>
    readonly addressThree: FieldRef<"Investor", 'String'>
    readonly pinCode: FieldRef<"Investor", 'String'>
    readonly state: FieldRef<"Investor", 'String'>
    readonly city: FieldRef<"Investor", 'String'>
    readonly accountDeactivate: FieldRef<"Investor", 'Boolean'>
    readonly receiveNotification: FieldRef<"Investor", 'Boolean'>
    readonly payMentMethod: FieldRef<"Investor", 'String'>
    readonly role: FieldRef<"Investor", 'Role'>
    readonly fundsAvailable: FieldRef<"Investor", 'String'>
    readonly expoPushToken: FieldRef<"Investor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Investor findUnique
   */
  export type InvestorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * Filter, which Investor to fetch.
     */
    where: InvestorWhereUniqueInput
  }

  /**
   * Investor findUniqueOrThrow
   */
  export type InvestorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * Filter, which Investor to fetch.
     */
    where: InvestorWhereUniqueInput
  }

  /**
   * Investor findFirst
   */
  export type InvestorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * Filter, which Investor to fetch.
     */
    where?: InvestorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Investors to fetch.
     */
    orderBy?: InvestorOrderByWithRelationInput | InvestorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Investors.
     */
    cursor?: InvestorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Investors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Investors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Investors.
     */
    distinct?: InvestorScalarFieldEnum | InvestorScalarFieldEnum[]
  }

  /**
   * Investor findFirstOrThrow
   */
  export type InvestorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * Filter, which Investor to fetch.
     */
    where?: InvestorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Investors to fetch.
     */
    orderBy?: InvestorOrderByWithRelationInput | InvestorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Investors.
     */
    cursor?: InvestorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Investors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Investors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Investors.
     */
    distinct?: InvestorScalarFieldEnum | InvestorScalarFieldEnum[]
  }

  /**
   * Investor findMany
   */
  export type InvestorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * Filter, which Investors to fetch.
     */
    where?: InvestorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Investors to fetch.
     */
    orderBy?: InvestorOrderByWithRelationInput | InvestorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Investors.
     */
    cursor?: InvestorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Investors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Investors.
     */
    skip?: number
    distinct?: InvestorScalarFieldEnum | InvestorScalarFieldEnum[]
  }

  /**
   * Investor create
   */
  export type InvestorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * The data needed to create a Investor.
     */
    data: XOR<InvestorCreateInput, InvestorUncheckedCreateInput>
  }

  /**
   * Investor createMany
   */
  export type InvestorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Investors.
     */
    data: InvestorCreateManyInput | InvestorCreateManyInput[]
  }

  /**
   * Investor update
   */
  export type InvestorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * The data needed to update a Investor.
     */
    data: XOR<InvestorUpdateInput, InvestorUncheckedUpdateInput>
    /**
     * Choose, which Investor to update.
     */
    where: InvestorWhereUniqueInput
  }

  /**
   * Investor updateMany
   */
  export type InvestorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Investors.
     */
    data: XOR<InvestorUpdateManyMutationInput, InvestorUncheckedUpdateManyInput>
    /**
     * Filter which Investors to update
     */
    where?: InvestorWhereInput
  }

  /**
   * Investor upsert
   */
  export type InvestorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * The filter to search for the Investor to update in case it exists.
     */
    where: InvestorWhereUniqueInput
    /**
     * In case the Investor found by the `where` argument doesn't exist, create a new Investor with this data.
     */
    create: XOR<InvestorCreateInput, InvestorUncheckedCreateInput>
    /**
     * In case the Investor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InvestorUpdateInput, InvestorUncheckedUpdateInput>
  }

  /**
   * Investor delete
   */
  export type InvestorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestorInclude<ExtArgs> | null
    /**
     * Filter which Investor to delete.
     */
    where: InvestorWhereUniqueInput
  }

  /**
   * Investor deleteMany
   */
  export type InvestorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Investors to delete
     */
    where?: InvestorWhereInput
  }

  /**
   * Investor findRaw
   */
  export type InvestorFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Investor aggregateRaw
   */
  export type InvestorAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Investor.properties
   */
  export type Investor$propertiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyInvestor
     */
    select?: PropertyInvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInvestorInclude<ExtArgs> | null
    where?: PropertyInvestorWhereInput
    orderBy?: PropertyInvestorOrderByWithRelationInput | PropertyInvestorOrderByWithRelationInput[]
    cursor?: PropertyInvestorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PropertyInvestorScalarFieldEnum | PropertyInvestorScalarFieldEnum[]
  }

  /**
   * Investor.bookmarks
   */
  export type Investor$bookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    cursor?: BookmarkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Investor without action
   */
  export type InvestorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Investor
     */
    select?: InvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InvestorInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    createdAt: number
    name: number
    email: number
    password: number
    role: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    email?: true
    password?: true
    role?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    email?: true
    password?: true
    role?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    createdAt?: true
    name?: true
    email?: true
    password?: true
    role?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: string
    createdAt: Date
    name: string
    email: string
    password: string
    role: $Enums.Role
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
  }, ExtArgs["result"]["admin"]>


  export type AdminSelectScalar = {
    id?: boolean
    createdAt?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
  }


  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      name: string
      email: string
      password: string
      role: $Enums.Role
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdminFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends AdminCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminCreateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends AdminCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends AdminDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * @param {AdminFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const admin = await prisma.admin.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: AdminFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Admin.
     * @param {AdminAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const admin = await prisma.admin.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: AdminAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'String'>
    readonly createdAt: FieldRef<"Admin", 'DateTime'>
    readonly name: FieldRef<"Admin", 'String'>
    readonly email: FieldRef<"Admin", 'String'>
    readonly password: FieldRef<"Admin", 'String'>
    readonly role: FieldRef<"Admin", 'Role'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }

  /**
   * Admin findRaw
   */
  export type AdminFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Admin aggregateRaw
   */
  export type AdminAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
  }


  /**
   * Model Property
   */

  export type AggregateProperty = {
    _count: PropertyCountAggregateOutputType | null
    _avg: PropertyAvgAggregateOutputType | null
    _sum: PropertySumAggregateOutputType | null
    _min: PropertyMinAggregateOutputType | null
    _max: PropertyMaxAggregateOutputType | null
  }

  export type PropertyAvgAggregateOutputType = {
    ageGrowth: number | null
    amountInvestedByMe: number | null
    myTokenOnProperty: number | null
  }

  export type PropertySumAggregateOutputType = {
    ageGrowth: number | null
    amountInvestedByMe: number | null
    myTokenOnProperty: number | null
  }

  export type PropertyMinAggregateOutputType = {
    id: string | null
    propertyName: string | null
    propertyLocation: string | null
    propertyImagePath: string | null
    propertyVideoPath: string | null
    totalAssetValue: string | null
    totalAssetValueLeft: string | null
    totalToken: string | null
    ageGrowth: number | null
    lockPeriod: string | null
    createdAt: Date | null
    updatedAt: Date | null
    amountInvestedByMe: number | null
    aboutTotalAssetValue: string | null
    myTokenOnProperty: number | null
    tokenLeft: string | null
    sharedType: string | null
    aboutSharedType: string | null
    holdingCompany: string | null
    aboutHoldingCompany: string | null
    aboutProperty: string | null
    propertyAmmenitiesImagePath: string | null
    titleDeedDocumentPath: string | null
    floorLayoutDocumentPath: string | null
    companyDetailsDocumentPath: string | null
    ownerShipDocumentPath: string | null
    otherDocumenthPath: string | null
    faqs: string | null
  }

  export type PropertyMaxAggregateOutputType = {
    id: string | null
    propertyName: string | null
    propertyLocation: string | null
    propertyImagePath: string | null
    propertyVideoPath: string | null
    totalAssetValue: string | null
    totalAssetValueLeft: string | null
    totalToken: string | null
    ageGrowth: number | null
    lockPeriod: string | null
    createdAt: Date | null
    updatedAt: Date | null
    amountInvestedByMe: number | null
    aboutTotalAssetValue: string | null
    myTokenOnProperty: number | null
    tokenLeft: string | null
    sharedType: string | null
    aboutSharedType: string | null
    holdingCompany: string | null
    aboutHoldingCompany: string | null
    aboutProperty: string | null
    propertyAmmenitiesImagePath: string | null
    titleDeedDocumentPath: string | null
    floorLayoutDocumentPath: string | null
    companyDetailsDocumentPath: string | null
    ownerShipDocumentPath: string | null
    otherDocumenthPath: string | null
    faqs: string | null
  }

  export type PropertyCountAggregateOutputType = {
    id: number
    propertyName: number
    propertyLocation: number
    propertyImagePath: number
    propertyVideoPath: number
    totalAssetValue: number
    totalAssetValueLeft: number
    totalToken: number
    ageGrowth: number
    lockPeriod: number
    createdAt: number
    updatedAt: number
    amountInvestedByMe: number
    aboutTotalAssetValue: number
    myTokenOnProperty: number
    tokenLeft: number
    sharedType: number
    aboutSharedType: number
    holdingCompany: number
    aboutHoldingCompany: number
    aboutProperty: number
    propertyAmmenitiesImagePath: number
    titleDeedDocumentPath: number
    floorLayoutDocumentPath: number
    companyDetailsDocumentPath: number
    ownerShipDocumentPath: number
    otherDocumenthPath: number
    faqs: number
    _all: number
  }


  export type PropertyAvgAggregateInputType = {
    ageGrowth?: true
    amountInvestedByMe?: true
    myTokenOnProperty?: true
  }

  export type PropertySumAggregateInputType = {
    ageGrowth?: true
    amountInvestedByMe?: true
    myTokenOnProperty?: true
  }

  export type PropertyMinAggregateInputType = {
    id?: true
    propertyName?: true
    propertyLocation?: true
    propertyImagePath?: true
    propertyVideoPath?: true
    totalAssetValue?: true
    totalAssetValueLeft?: true
    totalToken?: true
    ageGrowth?: true
    lockPeriod?: true
    createdAt?: true
    updatedAt?: true
    amountInvestedByMe?: true
    aboutTotalAssetValue?: true
    myTokenOnProperty?: true
    tokenLeft?: true
    sharedType?: true
    aboutSharedType?: true
    holdingCompany?: true
    aboutHoldingCompany?: true
    aboutProperty?: true
    propertyAmmenitiesImagePath?: true
    titleDeedDocumentPath?: true
    floorLayoutDocumentPath?: true
    companyDetailsDocumentPath?: true
    ownerShipDocumentPath?: true
    otherDocumenthPath?: true
    faqs?: true
  }

  export type PropertyMaxAggregateInputType = {
    id?: true
    propertyName?: true
    propertyLocation?: true
    propertyImagePath?: true
    propertyVideoPath?: true
    totalAssetValue?: true
    totalAssetValueLeft?: true
    totalToken?: true
    ageGrowth?: true
    lockPeriod?: true
    createdAt?: true
    updatedAt?: true
    amountInvestedByMe?: true
    aboutTotalAssetValue?: true
    myTokenOnProperty?: true
    tokenLeft?: true
    sharedType?: true
    aboutSharedType?: true
    holdingCompany?: true
    aboutHoldingCompany?: true
    aboutProperty?: true
    propertyAmmenitiesImagePath?: true
    titleDeedDocumentPath?: true
    floorLayoutDocumentPath?: true
    companyDetailsDocumentPath?: true
    ownerShipDocumentPath?: true
    otherDocumenthPath?: true
    faqs?: true
  }

  export type PropertyCountAggregateInputType = {
    id?: true
    propertyName?: true
    propertyLocation?: true
    propertyImagePath?: true
    propertyVideoPath?: true
    totalAssetValue?: true
    totalAssetValueLeft?: true
    totalToken?: true
    ageGrowth?: true
    lockPeriod?: true
    createdAt?: true
    updatedAt?: true
    amountInvestedByMe?: true
    aboutTotalAssetValue?: true
    myTokenOnProperty?: true
    tokenLeft?: true
    sharedType?: true
    aboutSharedType?: true
    holdingCompany?: true
    aboutHoldingCompany?: true
    aboutProperty?: true
    propertyAmmenitiesImagePath?: true
    titleDeedDocumentPath?: true
    floorLayoutDocumentPath?: true
    companyDetailsDocumentPath?: true
    ownerShipDocumentPath?: true
    otherDocumenthPath?: true
    faqs?: true
    _all?: true
  }

  export type PropertyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Property to aggregate.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Properties
    **/
    _count?: true | PropertyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PropertyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PropertySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropertyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropertyMaxAggregateInputType
  }

  export type GetPropertyAggregateType<T extends PropertyAggregateArgs> = {
        [P in keyof T & keyof AggregateProperty]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProperty[P]>
      : GetScalarType<T[P], AggregateProperty[P]>
  }




  export type PropertyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyWhereInput
    orderBy?: PropertyOrderByWithAggregationInput | PropertyOrderByWithAggregationInput[]
    by: PropertyScalarFieldEnum[] | PropertyScalarFieldEnum
    having?: PropertyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropertyCountAggregateInputType | true
    _avg?: PropertyAvgAggregateInputType
    _sum?: PropertySumAggregateInputType
    _min?: PropertyMinAggregateInputType
    _max?: PropertyMaxAggregateInputType
  }

  export type PropertyGroupByOutputType = {
    id: string
    propertyName: string
    propertyLocation: string
    propertyImagePath: string
    propertyVideoPath: string | null
    totalAssetValue: string
    totalAssetValueLeft: string
    totalToken: string
    ageGrowth: number
    lockPeriod: string
    createdAt: Date
    updatedAt: Date
    amountInvestedByMe: number
    aboutTotalAssetValue: string
    myTokenOnProperty: number
    tokenLeft: string
    sharedType: string
    aboutSharedType: string
    holdingCompany: string
    aboutHoldingCompany: string
    aboutProperty: string
    propertyAmmenitiesImagePath: string
    titleDeedDocumentPath: string
    floorLayoutDocumentPath: string
    companyDetailsDocumentPath: string
    ownerShipDocumentPath: string
    otherDocumenthPath: string | null
    faqs: string
    _count: PropertyCountAggregateOutputType | null
    _avg: PropertyAvgAggregateOutputType | null
    _sum: PropertySumAggregateOutputType | null
    _min: PropertyMinAggregateOutputType | null
    _max: PropertyMaxAggregateOutputType | null
  }

  type GetPropertyGroupByPayload<T extends PropertyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PropertyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropertyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropertyGroupByOutputType[P]>
            : GetScalarType<T[P], PropertyGroupByOutputType[P]>
        }
      >
    >


  export type PropertySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    propertyName?: boolean
    propertyLocation?: boolean
    propertyImagePath?: boolean
    propertyVideoPath?: boolean
    totalAssetValue?: boolean
    totalAssetValueLeft?: boolean
    totalToken?: boolean
    ageGrowth?: boolean
    lockPeriod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    amountInvestedByMe?: boolean
    aboutTotalAssetValue?: boolean
    myTokenOnProperty?: boolean
    tokenLeft?: boolean
    sharedType?: boolean
    aboutSharedType?: boolean
    holdingCompany?: boolean
    aboutHoldingCompany?: boolean
    aboutProperty?: boolean
    propertyAmmenitiesImagePath?: boolean
    titleDeedDocumentPath?: boolean
    floorLayoutDocumentPath?: boolean
    companyDetailsDocumentPath?: boolean
    ownerShipDocumentPath?: boolean
    otherDocumenthPath?: boolean
    faqs?: boolean
    investors?: boolean | Property$investorsArgs<ExtArgs>
    bookmarks?: boolean | Property$bookmarksArgs<ExtArgs>
    _count?: boolean | PropertyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["property"]>


  export type PropertySelectScalar = {
    id?: boolean
    propertyName?: boolean
    propertyLocation?: boolean
    propertyImagePath?: boolean
    propertyVideoPath?: boolean
    totalAssetValue?: boolean
    totalAssetValueLeft?: boolean
    totalToken?: boolean
    ageGrowth?: boolean
    lockPeriod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    amountInvestedByMe?: boolean
    aboutTotalAssetValue?: boolean
    myTokenOnProperty?: boolean
    tokenLeft?: boolean
    sharedType?: boolean
    aboutSharedType?: boolean
    holdingCompany?: boolean
    aboutHoldingCompany?: boolean
    aboutProperty?: boolean
    propertyAmmenitiesImagePath?: boolean
    titleDeedDocumentPath?: boolean
    floorLayoutDocumentPath?: boolean
    companyDetailsDocumentPath?: boolean
    ownerShipDocumentPath?: boolean
    otherDocumenthPath?: boolean
    faqs?: boolean
  }

  export type PropertyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    investors?: boolean | Property$investorsArgs<ExtArgs>
    bookmarks?: boolean | Property$bookmarksArgs<ExtArgs>
    _count?: boolean | PropertyCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PropertyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Property"
    objects: {
      investors: Prisma.$PropertyInvestorPayload<ExtArgs>[]
      bookmarks: Prisma.$BookmarkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      propertyName: string
      propertyLocation: string
      propertyImagePath: string
      propertyVideoPath: string | null
      totalAssetValue: string
      totalAssetValueLeft: string
      totalToken: string
      ageGrowth: number
      lockPeriod: string
      createdAt: Date
      updatedAt: Date
      amountInvestedByMe: number
      aboutTotalAssetValue: string
      myTokenOnProperty: number
      tokenLeft: string
      sharedType: string
      aboutSharedType: string
      holdingCompany: string
      aboutHoldingCompany: string
      aboutProperty: string
      propertyAmmenitiesImagePath: string
      titleDeedDocumentPath: string
      floorLayoutDocumentPath: string
      companyDetailsDocumentPath: string
      ownerShipDocumentPath: string
      otherDocumenthPath: string | null
      faqs: string
    }, ExtArgs["result"]["property"]>
    composites: {}
  }

  type PropertyGetPayload<S extends boolean | null | undefined | PropertyDefaultArgs> = $Result.GetResult<Prisma.$PropertyPayload, S>

  type PropertyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PropertyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PropertyCountAggregateInputType | true
    }

  export interface PropertyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Property'], meta: { name: 'Property' } }
    /**
     * Find zero or one Property that matches the filter.
     * @param {PropertyFindUniqueArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PropertyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyFindUniqueArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Property that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PropertyFindUniqueOrThrowArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PropertyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Property that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindFirstArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PropertyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyFindFirstArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Property that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindFirstOrThrowArgs} args - Arguments to find a Property
     * @example
     * // Get one Property
     * const property = await prisma.property.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PropertyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Properties that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Properties
     * const properties = await prisma.property.findMany()
     * 
     * // Get first 10 Properties
     * const properties = await prisma.property.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const propertyWithIdOnly = await prisma.property.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PropertyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Property.
     * @param {PropertyCreateArgs} args - Arguments to create a Property.
     * @example
     * // Create one Property
     * const Property = await prisma.property.create({
     *   data: {
     *     // ... data to create a Property
     *   }
     * })
     * 
    **/
    create<T extends PropertyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyCreateArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Properties.
     * @param {PropertyCreateManyArgs} args - Arguments to create many Properties.
     * @example
     * // Create many Properties
     * const property = await prisma.property.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PropertyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Property.
     * @param {PropertyDeleteArgs} args - Arguments to delete one Property.
     * @example
     * // Delete one Property
     * const Property = await prisma.property.delete({
     *   where: {
     *     // ... filter to delete one Property
     *   }
     * })
     * 
    **/
    delete<T extends PropertyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyDeleteArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Property.
     * @param {PropertyUpdateArgs} args - Arguments to update one Property.
     * @example
     * // Update one Property
     * const property = await prisma.property.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PropertyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyUpdateArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Properties.
     * @param {PropertyDeleteManyArgs} args - Arguments to filter Properties to delete.
     * @example
     * // Delete a few Properties
     * const { count } = await prisma.property.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PropertyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Properties
     * const property = await prisma.property.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PropertyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Property.
     * @param {PropertyUpsertArgs} args - Arguments to update or create a Property.
     * @example
     * // Update or create a Property
     * const property = await prisma.property.upsert({
     *   create: {
     *     // ... data to create a Property
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Property we want to update
     *   }
     * })
    **/
    upsert<T extends PropertyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyUpsertArgs<ExtArgs>>
    ): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Properties that matches the filter.
     * @param {PropertyFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const property = await prisma.property.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: PropertyFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Property.
     * @param {PropertyAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const property = await prisma.property.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: PropertyAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Properties.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyCountArgs} args - Arguments to filter Properties to count.
     * @example
     * // Count the number of Properties
     * const count = await prisma.property.count({
     *   where: {
     *     // ... the filter for the Properties we want to count
     *   }
     * })
    **/
    count<T extends PropertyCountArgs>(
      args?: Subset<T, PropertyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropertyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropertyAggregateArgs>(args: Subset<T, PropertyAggregateArgs>): Prisma.PrismaPromise<GetPropertyAggregateType<T>>

    /**
     * Group by Property.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PropertyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PropertyGroupByArgs['orderBy'] }
        : { orderBy?: PropertyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PropertyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropertyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Property model
   */
  readonly fields: PropertyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Property.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PropertyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    investors<T extends Property$investorsArgs<ExtArgs> = {}>(args?: Subset<T, Property$investorsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyInvestorPayload<ExtArgs>, T, 'findMany'> | Null>;

    bookmarks<T extends Property$bookmarksArgs<ExtArgs> = {}>(args?: Subset<T, Property$bookmarksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Property model
   */ 
  interface PropertyFieldRefs {
    readonly id: FieldRef<"Property", 'String'>
    readonly propertyName: FieldRef<"Property", 'String'>
    readonly propertyLocation: FieldRef<"Property", 'String'>
    readonly propertyImagePath: FieldRef<"Property", 'String'>
    readonly propertyVideoPath: FieldRef<"Property", 'String'>
    readonly totalAssetValue: FieldRef<"Property", 'String'>
    readonly totalAssetValueLeft: FieldRef<"Property", 'String'>
    readonly totalToken: FieldRef<"Property", 'String'>
    readonly ageGrowth: FieldRef<"Property", 'Float'>
    readonly lockPeriod: FieldRef<"Property", 'String'>
    readonly createdAt: FieldRef<"Property", 'DateTime'>
    readonly updatedAt: FieldRef<"Property", 'DateTime'>
    readonly amountInvestedByMe: FieldRef<"Property", 'Float'>
    readonly aboutTotalAssetValue: FieldRef<"Property", 'String'>
    readonly myTokenOnProperty: FieldRef<"Property", 'Float'>
    readonly tokenLeft: FieldRef<"Property", 'String'>
    readonly sharedType: FieldRef<"Property", 'String'>
    readonly aboutSharedType: FieldRef<"Property", 'String'>
    readonly holdingCompany: FieldRef<"Property", 'String'>
    readonly aboutHoldingCompany: FieldRef<"Property", 'String'>
    readonly aboutProperty: FieldRef<"Property", 'String'>
    readonly propertyAmmenitiesImagePath: FieldRef<"Property", 'String'>
    readonly titleDeedDocumentPath: FieldRef<"Property", 'String'>
    readonly floorLayoutDocumentPath: FieldRef<"Property", 'String'>
    readonly companyDetailsDocumentPath: FieldRef<"Property", 'String'>
    readonly ownerShipDocumentPath: FieldRef<"Property", 'String'>
    readonly otherDocumenthPath: FieldRef<"Property", 'String'>
    readonly faqs: FieldRef<"Property", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Property findUnique
   */
  export type PropertyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property findUniqueOrThrow
   */
  export type PropertyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property findFirst
   */
  export type PropertyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Properties.
     */
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * Property findFirstOrThrow
   */
  export type PropertyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Property to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Properties.
     */
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * Property findMany
   */
  export type PropertyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter, which Properties to fetch.
     */
    where?: PropertyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Properties to fetch.
     */
    orderBy?: PropertyOrderByWithRelationInput | PropertyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Properties.
     */
    cursor?: PropertyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Properties from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Properties.
     */
    skip?: number
    distinct?: PropertyScalarFieldEnum | PropertyScalarFieldEnum[]
  }

  /**
   * Property create
   */
  export type PropertyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * The data needed to create a Property.
     */
    data: XOR<PropertyCreateInput, PropertyUncheckedCreateInput>
  }

  /**
   * Property createMany
   */
  export type PropertyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Properties.
     */
    data: PropertyCreateManyInput | PropertyCreateManyInput[]
  }

  /**
   * Property update
   */
  export type PropertyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * The data needed to update a Property.
     */
    data: XOR<PropertyUpdateInput, PropertyUncheckedUpdateInput>
    /**
     * Choose, which Property to update.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property updateMany
   */
  export type PropertyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Properties.
     */
    data: XOR<PropertyUpdateManyMutationInput, PropertyUncheckedUpdateManyInput>
    /**
     * Filter which Properties to update
     */
    where?: PropertyWhereInput
  }

  /**
   * Property upsert
   */
  export type PropertyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * The filter to search for the Property to update in case it exists.
     */
    where: PropertyWhereUniqueInput
    /**
     * In case the Property found by the `where` argument doesn't exist, create a new Property with this data.
     */
    create: XOR<PropertyCreateInput, PropertyUncheckedCreateInput>
    /**
     * In case the Property was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PropertyUpdateInput, PropertyUncheckedUpdateInput>
  }

  /**
   * Property delete
   */
  export type PropertyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
    /**
     * Filter which Property to delete.
     */
    where: PropertyWhereUniqueInput
  }

  /**
   * Property deleteMany
   */
  export type PropertyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Properties to delete
     */
    where?: PropertyWhereInput
  }

  /**
   * Property findRaw
   */
  export type PropertyFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Property aggregateRaw
   */
  export type PropertyAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Property.investors
   */
  export type Property$investorsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyInvestor
     */
    select?: PropertyInvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInvestorInclude<ExtArgs> | null
    where?: PropertyInvestorWhereInput
    orderBy?: PropertyInvestorOrderByWithRelationInput | PropertyInvestorOrderByWithRelationInput[]
    cursor?: PropertyInvestorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PropertyInvestorScalarFieldEnum | PropertyInvestorScalarFieldEnum[]
  }

  /**
   * Property.bookmarks
   */
  export type Property$bookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    cursor?: BookmarkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Property without action
   */
  export type PropertyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Property
     */
    select?: PropertySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInclude<ExtArgs> | null
  }


  /**
   * Model PropertyInvestor
   */

  export type AggregatePropertyInvestor = {
    _count: PropertyInvestorCountAggregateOutputType | null
    _min: PropertyInvestorMinAggregateOutputType | null
    _max: PropertyInvestorMaxAggregateOutputType | null
  }

  export type PropertyInvestorMinAggregateOutputType = {
    id: string | null
    investorId: string | null
    propertyId: string | null
  }

  export type PropertyInvestorMaxAggregateOutputType = {
    id: string | null
    investorId: string | null
    propertyId: string | null
  }

  export type PropertyInvestorCountAggregateOutputType = {
    id: number
    investorId: number
    propertyId: number
    _all: number
  }


  export type PropertyInvestorMinAggregateInputType = {
    id?: true
    investorId?: true
    propertyId?: true
  }

  export type PropertyInvestorMaxAggregateInputType = {
    id?: true
    investorId?: true
    propertyId?: true
  }

  export type PropertyInvestorCountAggregateInputType = {
    id?: true
    investorId?: true
    propertyId?: true
    _all?: true
  }

  export type PropertyInvestorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PropertyInvestor to aggregate.
     */
    where?: PropertyInvestorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyInvestors to fetch.
     */
    orderBy?: PropertyInvestorOrderByWithRelationInput | PropertyInvestorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PropertyInvestorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyInvestors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyInvestors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PropertyInvestors
    **/
    _count?: true | PropertyInvestorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PropertyInvestorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PropertyInvestorMaxAggregateInputType
  }

  export type GetPropertyInvestorAggregateType<T extends PropertyInvestorAggregateArgs> = {
        [P in keyof T & keyof AggregatePropertyInvestor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePropertyInvestor[P]>
      : GetScalarType<T[P], AggregatePropertyInvestor[P]>
  }




  export type PropertyInvestorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PropertyInvestorWhereInput
    orderBy?: PropertyInvestorOrderByWithAggregationInput | PropertyInvestorOrderByWithAggregationInput[]
    by: PropertyInvestorScalarFieldEnum[] | PropertyInvestorScalarFieldEnum
    having?: PropertyInvestorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PropertyInvestorCountAggregateInputType | true
    _min?: PropertyInvestorMinAggregateInputType
    _max?: PropertyInvestorMaxAggregateInputType
  }

  export type PropertyInvestorGroupByOutputType = {
    id: string
    investorId: string
    propertyId: string
    _count: PropertyInvestorCountAggregateOutputType | null
    _min: PropertyInvestorMinAggregateOutputType | null
    _max: PropertyInvestorMaxAggregateOutputType | null
  }

  type GetPropertyInvestorGroupByPayload<T extends PropertyInvestorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PropertyInvestorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PropertyInvestorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PropertyInvestorGroupByOutputType[P]>
            : GetScalarType<T[P], PropertyInvestorGroupByOutputType[P]>
        }
      >
    >


  export type PropertyInvestorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    investorId?: boolean
    propertyId?: boolean
    investor?: boolean | InvestorDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["propertyInvestor"]>


  export type PropertyInvestorSelectScalar = {
    id?: boolean
    investorId?: boolean
    propertyId?: boolean
  }

  export type PropertyInvestorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    investor?: boolean | InvestorDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }

  export type $PropertyInvestorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PropertyInvestor"
    objects: {
      investor: Prisma.$InvestorPayload<ExtArgs>
      property: Prisma.$PropertyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      investorId: string
      propertyId: string
    }, ExtArgs["result"]["propertyInvestor"]>
    composites: {}
  }

  type PropertyInvestorGetPayload<S extends boolean | null | undefined | PropertyInvestorDefaultArgs> = $Result.GetResult<Prisma.$PropertyInvestorPayload, S>

  type PropertyInvestorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PropertyInvestorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PropertyInvestorCountAggregateInputType | true
    }

  export interface PropertyInvestorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PropertyInvestor'], meta: { name: 'PropertyInvestor' } }
    /**
     * Find zero or one PropertyInvestor that matches the filter.
     * @param {PropertyInvestorFindUniqueArgs} args - Arguments to find a PropertyInvestor
     * @example
     * // Get one PropertyInvestor
     * const propertyInvestor = await prisma.propertyInvestor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PropertyInvestorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyInvestorFindUniqueArgs<ExtArgs>>
    ): Prisma__PropertyInvestorClient<$Result.GetResult<Prisma.$PropertyInvestorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PropertyInvestor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PropertyInvestorFindUniqueOrThrowArgs} args - Arguments to find a PropertyInvestor
     * @example
     * // Get one PropertyInvestor
     * const propertyInvestor = await prisma.propertyInvestor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PropertyInvestorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyInvestorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PropertyInvestorClient<$Result.GetResult<Prisma.$PropertyInvestorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PropertyInvestor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyInvestorFindFirstArgs} args - Arguments to find a PropertyInvestor
     * @example
     * // Get one PropertyInvestor
     * const propertyInvestor = await prisma.propertyInvestor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PropertyInvestorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyInvestorFindFirstArgs<ExtArgs>>
    ): Prisma__PropertyInvestorClient<$Result.GetResult<Prisma.$PropertyInvestorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PropertyInvestor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyInvestorFindFirstOrThrowArgs} args - Arguments to find a PropertyInvestor
     * @example
     * // Get one PropertyInvestor
     * const propertyInvestor = await prisma.propertyInvestor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PropertyInvestorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyInvestorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PropertyInvestorClient<$Result.GetResult<Prisma.$PropertyInvestorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PropertyInvestors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyInvestorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PropertyInvestors
     * const propertyInvestors = await prisma.propertyInvestor.findMany()
     * 
     * // Get first 10 PropertyInvestors
     * const propertyInvestors = await prisma.propertyInvestor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const propertyInvestorWithIdOnly = await prisma.propertyInvestor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PropertyInvestorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyInvestorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PropertyInvestorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PropertyInvestor.
     * @param {PropertyInvestorCreateArgs} args - Arguments to create a PropertyInvestor.
     * @example
     * // Create one PropertyInvestor
     * const PropertyInvestor = await prisma.propertyInvestor.create({
     *   data: {
     *     // ... data to create a PropertyInvestor
     *   }
     * })
     * 
    **/
    create<T extends PropertyInvestorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyInvestorCreateArgs<ExtArgs>>
    ): Prisma__PropertyInvestorClient<$Result.GetResult<Prisma.$PropertyInvestorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PropertyInvestors.
     * @param {PropertyInvestorCreateManyArgs} args - Arguments to create many PropertyInvestors.
     * @example
     * // Create many PropertyInvestors
     * const propertyInvestor = await prisma.propertyInvestor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PropertyInvestorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyInvestorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PropertyInvestor.
     * @param {PropertyInvestorDeleteArgs} args - Arguments to delete one PropertyInvestor.
     * @example
     * // Delete one PropertyInvestor
     * const PropertyInvestor = await prisma.propertyInvestor.delete({
     *   where: {
     *     // ... filter to delete one PropertyInvestor
     *   }
     * })
     * 
    **/
    delete<T extends PropertyInvestorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyInvestorDeleteArgs<ExtArgs>>
    ): Prisma__PropertyInvestorClient<$Result.GetResult<Prisma.$PropertyInvestorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PropertyInvestor.
     * @param {PropertyInvestorUpdateArgs} args - Arguments to update one PropertyInvestor.
     * @example
     * // Update one PropertyInvestor
     * const propertyInvestor = await prisma.propertyInvestor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PropertyInvestorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyInvestorUpdateArgs<ExtArgs>>
    ): Prisma__PropertyInvestorClient<$Result.GetResult<Prisma.$PropertyInvestorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PropertyInvestors.
     * @param {PropertyInvestorDeleteManyArgs} args - Arguments to filter PropertyInvestors to delete.
     * @example
     * // Delete a few PropertyInvestors
     * const { count } = await prisma.propertyInvestor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PropertyInvestorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PropertyInvestorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PropertyInvestors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyInvestorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PropertyInvestors
     * const propertyInvestor = await prisma.propertyInvestor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PropertyInvestorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyInvestorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PropertyInvestor.
     * @param {PropertyInvestorUpsertArgs} args - Arguments to update or create a PropertyInvestor.
     * @example
     * // Update or create a PropertyInvestor
     * const propertyInvestor = await prisma.propertyInvestor.upsert({
     *   create: {
     *     // ... data to create a PropertyInvestor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PropertyInvestor we want to update
     *   }
     * })
    **/
    upsert<T extends PropertyInvestorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PropertyInvestorUpsertArgs<ExtArgs>>
    ): Prisma__PropertyInvestorClient<$Result.GetResult<Prisma.$PropertyInvestorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more PropertyInvestors that matches the filter.
     * @param {PropertyInvestorFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const propertyInvestor = await prisma.propertyInvestor.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: PropertyInvestorFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a PropertyInvestor.
     * @param {PropertyInvestorAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const propertyInvestor = await prisma.propertyInvestor.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: PropertyInvestorAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of PropertyInvestors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyInvestorCountArgs} args - Arguments to filter PropertyInvestors to count.
     * @example
     * // Count the number of PropertyInvestors
     * const count = await prisma.propertyInvestor.count({
     *   where: {
     *     // ... the filter for the PropertyInvestors we want to count
     *   }
     * })
    **/
    count<T extends PropertyInvestorCountArgs>(
      args?: Subset<T, PropertyInvestorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PropertyInvestorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PropertyInvestor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyInvestorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PropertyInvestorAggregateArgs>(args: Subset<T, PropertyInvestorAggregateArgs>): Prisma.PrismaPromise<GetPropertyInvestorAggregateType<T>>

    /**
     * Group by PropertyInvestor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PropertyInvestorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PropertyInvestorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PropertyInvestorGroupByArgs['orderBy'] }
        : { orderBy?: PropertyInvestorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PropertyInvestorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPropertyInvestorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PropertyInvestor model
   */
  readonly fields: PropertyInvestorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PropertyInvestor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PropertyInvestorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    investor<T extends InvestorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvestorDefaultArgs<ExtArgs>>): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    property<T extends PropertyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PropertyDefaultArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PropertyInvestor model
   */ 
  interface PropertyInvestorFieldRefs {
    readonly id: FieldRef<"PropertyInvestor", 'String'>
    readonly investorId: FieldRef<"PropertyInvestor", 'String'>
    readonly propertyId: FieldRef<"PropertyInvestor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PropertyInvestor findUnique
   */
  export type PropertyInvestorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyInvestor
     */
    select?: PropertyInvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInvestorInclude<ExtArgs> | null
    /**
     * Filter, which PropertyInvestor to fetch.
     */
    where: PropertyInvestorWhereUniqueInput
  }

  /**
   * PropertyInvestor findUniqueOrThrow
   */
  export type PropertyInvestorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyInvestor
     */
    select?: PropertyInvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInvestorInclude<ExtArgs> | null
    /**
     * Filter, which PropertyInvestor to fetch.
     */
    where: PropertyInvestorWhereUniqueInput
  }

  /**
   * PropertyInvestor findFirst
   */
  export type PropertyInvestorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyInvestor
     */
    select?: PropertyInvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInvestorInclude<ExtArgs> | null
    /**
     * Filter, which PropertyInvestor to fetch.
     */
    where?: PropertyInvestorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyInvestors to fetch.
     */
    orderBy?: PropertyInvestorOrderByWithRelationInput | PropertyInvestorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PropertyInvestors.
     */
    cursor?: PropertyInvestorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyInvestors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyInvestors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PropertyInvestors.
     */
    distinct?: PropertyInvestorScalarFieldEnum | PropertyInvestorScalarFieldEnum[]
  }

  /**
   * PropertyInvestor findFirstOrThrow
   */
  export type PropertyInvestorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyInvestor
     */
    select?: PropertyInvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInvestorInclude<ExtArgs> | null
    /**
     * Filter, which PropertyInvestor to fetch.
     */
    where?: PropertyInvestorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyInvestors to fetch.
     */
    orderBy?: PropertyInvestorOrderByWithRelationInput | PropertyInvestorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PropertyInvestors.
     */
    cursor?: PropertyInvestorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyInvestors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyInvestors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PropertyInvestors.
     */
    distinct?: PropertyInvestorScalarFieldEnum | PropertyInvestorScalarFieldEnum[]
  }

  /**
   * PropertyInvestor findMany
   */
  export type PropertyInvestorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyInvestor
     */
    select?: PropertyInvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInvestorInclude<ExtArgs> | null
    /**
     * Filter, which PropertyInvestors to fetch.
     */
    where?: PropertyInvestorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PropertyInvestors to fetch.
     */
    orderBy?: PropertyInvestorOrderByWithRelationInput | PropertyInvestorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PropertyInvestors.
     */
    cursor?: PropertyInvestorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PropertyInvestors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PropertyInvestors.
     */
    skip?: number
    distinct?: PropertyInvestorScalarFieldEnum | PropertyInvestorScalarFieldEnum[]
  }

  /**
   * PropertyInvestor create
   */
  export type PropertyInvestorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyInvestor
     */
    select?: PropertyInvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInvestorInclude<ExtArgs> | null
    /**
     * The data needed to create a PropertyInvestor.
     */
    data: XOR<PropertyInvestorCreateInput, PropertyInvestorUncheckedCreateInput>
  }

  /**
   * PropertyInvestor createMany
   */
  export type PropertyInvestorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PropertyInvestors.
     */
    data: PropertyInvestorCreateManyInput | PropertyInvestorCreateManyInput[]
  }

  /**
   * PropertyInvestor update
   */
  export type PropertyInvestorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyInvestor
     */
    select?: PropertyInvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInvestorInclude<ExtArgs> | null
    /**
     * The data needed to update a PropertyInvestor.
     */
    data: XOR<PropertyInvestorUpdateInput, PropertyInvestorUncheckedUpdateInput>
    /**
     * Choose, which PropertyInvestor to update.
     */
    where: PropertyInvestorWhereUniqueInput
  }

  /**
   * PropertyInvestor updateMany
   */
  export type PropertyInvestorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PropertyInvestors.
     */
    data: XOR<PropertyInvestorUpdateManyMutationInput, PropertyInvestorUncheckedUpdateManyInput>
    /**
     * Filter which PropertyInvestors to update
     */
    where?: PropertyInvestorWhereInput
  }

  /**
   * PropertyInvestor upsert
   */
  export type PropertyInvestorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyInvestor
     */
    select?: PropertyInvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInvestorInclude<ExtArgs> | null
    /**
     * The filter to search for the PropertyInvestor to update in case it exists.
     */
    where: PropertyInvestorWhereUniqueInput
    /**
     * In case the PropertyInvestor found by the `where` argument doesn't exist, create a new PropertyInvestor with this data.
     */
    create: XOR<PropertyInvestorCreateInput, PropertyInvestorUncheckedCreateInput>
    /**
     * In case the PropertyInvestor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PropertyInvestorUpdateInput, PropertyInvestorUncheckedUpdateInput>
  }

  /**
   * PropertyInvestor delete
   */
  export type PropertyInvestorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyInvestor
     */
    select?: PropertyInvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInvestorInclude<ExtArgs> | null
    /**
     * Filter which PropertyInvestor to delete.
     */
    where: PropertyInvestorWhereUniqueInput
  }

  /**
   * PropertyInvestor deleteMany
   */
  export type PropertyInvestorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PropertyInvestors to delete
     */
    where?: PropertyInvestorWhereInput
  }

  /**
   * PropertyInvestor findRaw
   */
  export type PropertyInvestorFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * PropertyInvestor aggregateRaw
   */
  export type PropertyInvestorAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * PropertyInvestor without action
   */
  export type PropertyInvestorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PropertyInvestor
     */
    select?: PropertyInvestorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PropertyInvestorInclude<ExtArgs> | null
  }


  /**
   * Model Bookmark
   */

  export type AggregateBookmark = {
    _count: BookmarkCountAggregateOutputType | null
    _min: BookmarkMinAggregateOutputType | null
    _max: BookmarkMaxAggregateOutputType | null
  }

  export type BookmarkMinAggregateOutputType = {
    id: string | null
    investorId: string | null
    propertyId: string | null
    createdAt: Date | null
  }

  export type BookmarkMaxAggregateOutputType = {
    id: string | null
    investorId: string | null
    propertyId: string | null
    createdAt: Date | null
  }

  export type BookmarkCountAggregateOutputType = {
    id: number
    investorId: number
    propertyId: number
    createdAt: number
    _all: number
  }


  export type BookmarkMinAggregateInputType = {
    id?: true
    investorId?: true
    propertyId?: true
    createdAt?: true
  }

  export type BookmarkMaxAggregateInputType = {
    id?: true
    investorId?: true
    propertyId?: true
    createdAt?: true
  }

  export type BookmarkCountAggregateInputType = {
    id?: true
    investorId?: true
    propertyId?: true
    createdAt?: true
    _all?: true
  }

  export type BookmarkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookmark to aggregate.
     */
    where?: BookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmarks to fetch.
     */
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookmarks
    **/
    _count?: true | BookmarkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookmarkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookmarkMaxAggregateInputType
  }

  export type GetBookmarkAggregateType<T extends BookmarkAggregateArgs> = {
        [P in keyof T & keyof AggregateBookmark]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookmark[P]>
      : GetScalarType<T[P], AggregateBookmark[P]>
  }




  export type BookmarkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByWithAggregationInput | BookmarkOrderByWithAggregationInput[]
    by: BookmarkScalarFieldEnum[] | BookmarkScalarFieldEnum
    having?: BookmarkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookmarkCountAggregateInputType | true
    _min?: BookmarkMinAggregateInputType
    _max?: BookmarkMaxAggregateInputType
  }

  export type BookmarkGroupByOutputType = {
    id: string
    investorId: string
    propertyId: string
    createdAt: Date
    _count: BookmarkCountAggregateOutputType | null
    _min: BookmarkMinAggregateOutputType | null
    _max: BookmarkMaxAggregateOutputType | null
  }

  type GetBookmarkGroupByPayload<T extends BookmarkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookmarkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookmarkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookmarkGroupByOutputType[P]>
            : GetScalarType<T[P], BookmarkGroupByOutputType[P]>
        }
      >
    >


  export type BookmarkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    investorId?: boolean
    propertyId?: boolean
    createdAt?: boolean
    investor?: boolean | InvestorDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmark"]>


  export type BookmarkSelectScalar = {
    id?: boolean
    investorId?: boolean
    propertyId?: boolean
    createdAt?: boolean
  }

  export type BookmarkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    investor?: boolean | InvestorDefaultArgs<ExtArgs>
    property?: boolean | PropertyDefaultArgs<ExtArgs>
  }

  export type $BookmarkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bookmark"
    objects: {
      investor: Prisma.$InvestorPayload<ExtArgs>
      property: Prisma.$PropertyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      investorId: string
      propertyId: string
      createdAt: Date
    }, ExtArgs["result"]["bookmark"]>
    composites: {}
  }

  type BookmarkGetPayload<S extends boolean | null | undefined | BookmarkDefaultArgs> = $Result.GetResult<Prisma.$BookmarkPayload, S>

  type BookmarkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BookmarkFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BookmarkCountAggregateInputType | true
    }

  export interface BookmarkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bookmark'], meta: { name: 'Bookmark' } }
    /**
     * Find zero or one Bookmark that matches the filter.
     * @param {BookmarkFindUniqueArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookmarkFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BookmarkFindUniqueArgs<ExtArgs>>
    ): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Bookmark that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BookmarkFindUniqueOrThrowArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BookmarkFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BookmarkFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Bookmark that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkFindFirstArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookmarkFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BookmarkFindFirstArgs<ExtArgs>>
    ): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Bookmark that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkFindFirstOrThrowArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BookmarkFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BookmarkFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Bookmarks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookmarks
     * const bookmarks = await prisma.bookmark.findMany()
     * 
     * // Get first 10 Bookmarks
     * const bookmarks = await prisma.bookmark.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookmarkWithIdOnly = await prisma.bookmark.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BookmarkFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookmarkFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Bookmark.
     * @param {BookmarkCreateArgs} args - Arguments to create a Bookmark.
     * @example
     * // Create one Bookmark
     * const Bookmark = await prisma.bookmark.create({
     *   data: {
     *     // ... data to create a Bookmark
     *   }
     * })
     * 
    **/
    create<T extends BookmarkCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BookmarkCreateArgs<ExtArgs>>
    ): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Bookmarks.
     * @param {BookmarkCreateManyArgs} args - Arguments to create many Bookmarks.
     * @example
     * // Create many Bookmarks
     * const bookmark = await prisma.bookmark.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends BookmarkCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookmarkCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bookmark.
     * @param {BookmarkDeleteArgs} args - Arguments to delete one Bookmark.
     * @example
     * // Delete one Bookmark
     * const Bookmark = await prisma.bookmark.delete({
     *   where: {
     *     // ... filter to delete one Bookmark
     *   }
     * })
     * 
    **/
    delete<T extends BookmarkDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BookmarkDeleteArgs<ExtArgs>>
    ): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Bookmark.
     * @param {BookmarkUpdateArgs} args - Arguments to update one Bookmark.
     * @example
     * // Update one Bookmark
     * const bookmark = await prisma.bookmark.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookmarkUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BookmarkUpdateArgs<ExtArgs>>
    ): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Bookmarks.
     * @param {BookmarkDeleteManyArgs} args - Arguments to filter Bookmarks to delete.
     * @example
     * // Delete a few Bookmarks
     * const { count } = await prisma.bookmark.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookmarkDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookmarkDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookmarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookmarks
     * const bookmark = await prisma.bookmark.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookmarkUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BookmarkUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bookmark.
     * @param {BookmarkUpsertArgs} args - Arguments to update or create a Bookmark.
     * @example
     * // Update or create a Bookmark
     * const bookmark = await prisma.bookmark.upsert({
     *   create: {
     *     // ... data to create a Bookmark
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bookmark we want to update
     *   }
     * })
    **/
    upsert<T extends BookmarkUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BookmarkUpsertArgs<ExtArgs>>
    ): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Bookmarks that matches the filter.
     * @param {BookmarkFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const bookmark = await prisma.bookmark.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: BookmarkFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Bookmark.
     * @param {BookmarkAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const bookmark = await prisma.bookmark.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: BookmarkAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Bookmarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkCountArgs} args - Arguments to filter Bookmarks to count.
     * @example
     * // Count the number of Bookmarks
     * const count = await prisma.bookmark.count({
     *   where: {
     *     // ... the filter for the Bookmarks we want to count
     *   }
     * })
    **/
    count<T extends BookmarkCountArgs>(
      args?: Subset<T, BookmarkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookmarkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bookmark.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookmarkAggregateArgs>(args: Subset<T, BookmarkAggregateArgs>): Prisma.PrismaPromise<GetBookmarkAggregateType<T>>

    /**
     * Group by Bookmark.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookmarkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookmarkGroupByArgs['orderBy'] }
        : { orderBy?: BookmarkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookmarkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookmarkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bookmark model
   */
  readonly fields: BookmarkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bookmark.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookmarkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    investor<T extends InvestorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InvestorDefaultArgs<ExtArgs>>): Prisma__InvestorClient<$Result.GetResult<Prisma.$InvestorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    property<T extends PropertyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PropertyDefaultArgs<ExtArgs>>): Prisma__PropertyClient<$Result.GetResult<Prisma.$PropertyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Bookmark model
   */ 
  interface BookmarkFieldRefs {
    readonly id: FieldRef<"Bookmark", 'String'>
    readonly investorId: FieldRef<"Bookmark", 'String'>
    readonly propertyId: FieldRef<"Bookmark", 'String'>
    readonly createdAt: FieldRef<"Bookmark", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Bookmark findUnique
   */
  export type BookmarkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmark to fetch.
     */
    where: BookmarkWhereUniqueInput
  }

  /**
   * Bookmark findUniqueOrThrow
   */
  export type BookmarkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmark to fetch.
     */
    where: BookmarkWhereUniqueInput
  }

  /**
   * Bookmark findFirst
   */
  export type BookmarkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmark to fetch.
     */
    where?: BookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmarks to fetch.
     */
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookmarks.
     */
    cursor?: BookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookmarks.
     */
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Bookmark findFirstOrThrow
   */
  export type BookmarkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmark to fetch.
     */
    where?: BookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmarks to fetch.
     */
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookmarks.
     */
    cursor?: BookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookmarks.
     */
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Bookmark findMany
   */
  export type BookmarkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmarks to fetch.
     */
    where?: BookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmarks to fetch.
     */
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookmarks.
     */
    cursor?: BookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmarks.
     */
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Bookmark create
   */
  export type BookmarkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * The data needed to create a Bookmark.
     */
    data: XOR<BookmarkCreateInput, BookmarkUncheckedCreateInput>
  }

  /**
   * Bookmark createMany
   */
  export type BookmarkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bookmarks.
     */
    data: BookmarkCreateManyInput | BookmarkCreateManyInput[]
  }

  /**
   * Bookmark update
   */
  export type BookmarkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * The data needed to update a Bookmark.
     */
    data: XOR<BookmarkUpdateInput, BookmarkUncheckedUpdateInput>
    /**
     * Choose, which Bookmark to update.
     */
    where: BookmarkWhereUniqueInput
  }

  /**
   * Bookmark updateMany
   */
  export type BookmarkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bookmarks.
     */
    data: XOR<BookmarkUpdateManyMutationInput, BookmarkUncheckedUpdateManyInput>
    /**
     * Filter which Bookmarks to update
     */
    where?: BookmarkWhereInput
  }

  /**
   * Bookmark upsert
   */
  export type BookmarkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * The filter to search for the Bookmark to update in case it exists.
     */
    where: BookmarkWhereUniqueInput
    /**
     * In case the Bookmark found by the `where` argument doesn't exist, create a new Bookmark with this data.
     */
    create: XOR<BookmarkCreateInput, BookmarkUncheckedCreateInput>
    /**
     * In case the Bookmark was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookmarkUpdateInput, BookmarkUncheckedUpdateInput>
  }

  /**
   * Bookmark delete
   */
  export type BookmarkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter which Bookmark to delete.
     */
    where: BookmarkWhereUniqueInput
  }

  /**
   * Bookmark deleteMany
   */
  export type BookmarkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookmarks to delete
     */
    where?: BookmarkWhereInput
  }

  /**
   * Bookmark findRaw
   */
  export type BookmarkFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Bookmark aggregateRaw
   */
  export type BookmarkAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Bookmark without action
   */
  export type BookmarkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const InvestorScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    emailId: 'emailId',
    mobileNumber: 'mobileNumber',
    dateofBirth: 'dateofBirth',
    password: 'password',
    emailVerified: 'emailVerified',
    phoneNumberVerified: 'phoneNumberVerified',
    selfieImagePath: 'selfieImagePath',
    addressImagePath: 'addressImagePath',
    employmentImagePath: 'employmentImagePath',
    additionalDocumentImagePath: 'additionalDocumentImagePath',
    industry: 'industry',
    organization: 'organization',
    roleAtWork: 'roleAtWork',
    workingDuration: 'workingDuration',
    incomeRange: 'incomeRange',
    profileUserImagePath: 'profileUserImagePath',
    investmentPreference: 'investmentPreference',
    addressOne: 'addressOne',
    addressTwo: 'addressTwo',
    addressThree: 'addressThree',
    pinCode: 'pinCode',
    state: 'state',
    city: 'city',
    accountDeactivate: 'accountDeactivate',
    receiveNotification: 'receiveNotification',
    payMentMethod: 'payMentMethod',
    role: 'role',
    fundsAvailable: 'fundsAvailable',
    expoPushToken: 'expoPushToken'
  };

  export type InvestorScalarFieldEnum = (typeof InvestorScalarFieldEnum)[keyof typeof InvestorScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const PropertyScalarFieldEnum: {
    id: 'id',
    propertyName: 'propertyName',
    propertyLocation: 'propertyLocation',
    propertyImagePath: 'propertyImagePath',
    propertyVideoPath: 'propertyVideoPath',
    totalAssetValue: 'totalAssetValue',
    totalAssetValueLeft: 'totalAssetValueLeft',
    totalToken: 'totalToken',
    ageGrowth: 'ageGrowth',
    lockPeriod: 'lockPeriod',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    amountInvestedByMe: 'amountInvestedByMe',
    aboutTotalAssetValue: 'aboutTotalAssetValue',
    myTokenOnProperty: 'myTokenOnProperty',
    tokenLeft: 'tokenLeft',
    sharedType: 'sharedType',
    aboutSharedType: 'aboutSharedType',
    holdingCompany: 'holdingCompany',
    aboutHoldingCompany: 'aboutHoldingCompany',
    aboutProperty: 'aboutProperty',
    propertyAmmenitiesImagePath: 'propertyAmmenitiesImagePath',
    titleDeedDocumentPath: 'titleDeedDocumentPath',
    floorLayoutDocumentPath: 'floorLayoutDocumentPath',
    companyDetailsDocumentPath: 'companyDetailsDocumentPath',
    ownerShipDocumentPath: 'ownerShipDocumentPath',
    otherDocumenthPath: 'otherDocumenthPath',
    faqs: 'faqs'
  };

  export type PropertyScalarFieldEnum = (typeof PropertyScalarFieldEnum)[keyof typeof PropertyScalarFieldEnum]


  export const PropertyInvestorScalarFieldEnum: {
    id: 'id',
    investorId: 'investorId',
    propertyId: 'propertyId'
  };

  export type PropertyInvestorScalarFieldEnum = (typeof PropertyInvestorScalarFieldEnum)[keyof typeof PropertyInvestorScalarFieldEnum]


  export const BookmarkScalarFieldEnum: {
    id: 'id',
    investorId: 'investorId',
    propertyId: 'propertyId',
    createdAt: 'createdAt'
  };

  export type BookmarkScalarFieldEnum = (typeof BookmarkScalarFieldEnum)[keyof typeof BookmarkScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'AnnualIncomeRange'
   */
  export type EnumAnnualIncomeRangeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnnualIncomeRange'>
    


  /**
   * Reference to a field of type 'AnnualIncomeRange[]'
   */
  export type ListEnumAnnualIncomeRangeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnnualIncomeRange[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type InvestorWhereInput = {
    AND?: InvestorWhereInput | InvestorWhereInput[]
    OR?: InvestorWhereInput[]
    NOT?: InvestorWhereInput | InvestorWhereInput[]
    id?: StringFilter<"Investor"> | string
    fullName?: StringFilter<"Investor"> | string
    emailId?: StringFilter<"Investor"> | string
    mobileNumber?: StringFilter<"Investor"> | string
    dateofBirth?: DateTimeFilter<"Investor"> | Date | string
    password?: StringNullableFilter<"Investor"> | string | null
    emailVerified?: BoolFilter<"Investor"> | boolean
    phoneNumberVerified?: BoolFilter<"Investor"> | boolean
    selfieImagePath?: StringNullableFilter<"Investor"> | string | null
    addressImagePath?: StringNullableFilter<"Investor"> | string | null
    employmentImagePath?: StringNullableFilter<"Investor"> | string | null
    additionalDocumentImagePath?: StringNullableFilter<"Investor"> | string | null
    industry?: StringNullableFilter<"Investor"> | string | null
    organization?: StringNullableFilter<"Investor"> | string | null
    roleAtWork?: StringNullableFilter<"Investor"> | string | null
    workingDuration?: StringNullableFilter<"Investor"> | string | null
    incomeRange?: EnumAnnualIncomeRangeNullableFilter<"Investor"> | $Enums.AnnualIncomeRange | null
    profileUserImagePath?: StringNullableFilter<"Investor"> | string | null
    investmentPreference?: StringNullableFilter<"Investor"> | string | null
    addressOne?: StringNullableFilter<"Investor"> | string | null
    addressTwo?: StringNullableFilter<"Investor"> | string | null
    addressThree?: StringNullableFilter<"Investor"> | string | null
    pinCode?: StringNullableFilter<"Investor"> | string | null
    state?: StringNullableFilter<"Investor"> | string | null
    city?: StringNullableFilter<"Investor"> | string | null
    accountDeactivate?: BoolFilter<"Investor"> | boolean
    receiveNotification?: BoolFilter<"Investor"> | boolean
    payMentMethod?: StringFilter<"Investor"> | string
    role?: EnumRoleFilter<"Investor"> | $Enums.Role
    fundsAvailable?: StringFilter<"Investor"> | string
    expoPushToken?: StringNullableFilter<"Investor"> | string | null
    properties?: PropertyInvestorListRelationFilter
    bookmarks?: BookmarkListRelationFilter
  }

  export type InvestorOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    emailId?: SortOrder
    mobileNumber?: SortOrder
    dateofBirth?: SortOrder
    password?: SortOrder
    emailVerified?: SortOrder
    phoneNumberVerified?: SortOrder
    selfieImagePath?: SortOrder
    addressImagePath?: SortOrder
    employmentImagePath?: SortOrder
    additionalDocumentImagePath?: SortOrder
    industry?: SortOrder
    organization?: SortOrder
    roleAtWork?: SortOrder
    workingDuration?: SortOrder
    incomeRange?: SortOrder
    profileUserImagePath?: SortOrder
    investmentPreference?: SortOrder
    addressOne?: SortOrder
    addressTwo?: SortOrder
    addressThree?: SortOrder
    pinCode?: SortOrder
    state?: SortOrder
    city?: SortOrder
    accountDeactivate?: SortOrder
    receiveNotification?: SortOrder
    payMentMethod?: SortOrder
    role?: SortOrder
    fundsAvailable?: SortOrder
    expoPushToken?: SortOrder
    properties?: PropertyInvestorOrderByRelationAggregateInput
    bookmarks?: BookmarkOrderByRelationAggregateInput
  }

  export type InvestorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    emailId?: string
    mobileNumber?: string
    AND?: InvestorWhereInput | InvestorWhereInput[]
    OR?: InvestorWhereInput[]
    NOT?: InvestorWhereInput | InvestorWhereInput[]
    fullName?: StringFilter<"Investor"> | string
    dateofBirth?: DateTimeFilter<"Investor"> | Date | string
    password?: StringNullableFilter<"Investor"> | string | null
    emailVerified?: BoolFilter<"Investor"> | boolean
    phoneNumberVerified?: BoolFilter<"Investor"> | boolean
    selfieImagePath?: StringNullableFilter<"Investor"> | string | null
    addressImagePath?: StringNullableFilter<"Investor"> | string | null
    employmentImagePath?: StringNullableFilter<"Investor"> | string | null
    additionalDocumentImagePath?: StringNullableFilter<"Investor"> | string | null
    industry?: StringNullableFilter<"Investor"> | string | null
    organization?: StringNullableFilter<"Investor"> | string | null
    roleAtWork?: StringNullableFilter<"Investor"> | string | null
    workingDuration?: StringNullableFilter<"Investor"> | string | null
    incomeRange?: EnumAnnualIncomeRangeNullableFilter<"Investor"> | $Enums.AnnualIncomeRange | null
    profileUserImagePath?: StringNullableFilter<"Investor"> | string | null
    investmentPreference?: StringNullableFilter<"Investor"> | string | null
    addressOne?: StringNullableFilter<"Investor"> | string | null
    addressTwo?: StringNullableFilter<"Investor"> | string | null
    addressThree?: StringNullableFilter<"Investor"> | string | null
    pinCode?: StringNullableFilter<"Investor"> | string | null
    state?: StringNullableFilter<"Investor"> | string | null
    city?: StringNullableFilter<"Investor"> | string | null
    accountDeactivate?: BoolFilter<"Investor"> | boolean
    receiveNotification?: BoolFilter<"Investor"> | boolean
    payMentMethod?: StringFilter<"Investor"> | string
    role?: EnumRoleFilter<"Investor"> | $Enums.Role
    fundsAvailable?: StringFilter<"Investor"> | string
    expoPushToken?: StringNullableFilter<"Investor"> | string | null
    properties?: PropertyInvestorListRelationFilter
    bookmarks?: BookmarkListRelationFilter
  }, "id" | "emailId" | "mobileNumber">

  export type InvestorOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    emailId?: SortOrder
    mobileNumber?: SortOrder
    dateofBirth?: SortOrder
    password?: SortOrder
    emailVerified?: SortOrder
    phoneNumberVerified?: SortOrder
    selfieImagePath?: SortOrder
    addressImagePath?: SortOrder
    employmentImagePath?: SortOrder
    additionalDocumentImagePath?: SortOrder
    industry?: SortOrder
    organization?: SortOrder
    roleAtWork?: SortOrder
    workingDuration?: SortOrder
    incomeRange?: SortOrder
    profileUserImagePath?: SortOrder
    investmentPreference?: SortOrder
    addressOne?: SortOrder
    addressTwo?: SortOrder
    addressThree?: SortOrder
    pinCode?: SortOrder
    state?: SortOrder
    city?: SortOrder
    accountDeactivate?: SortOrder
    receiveNotification?: SortOrder
    payMentMethod?: SortOrder
    role?: SortOrder
    fundsAvailable?: SortOrder
    expoPushToken?: SortOrder
    _count?: InvestorCountOrderByAggregateInput
    _max?: InvestorMaxOrderByAggregateInput
    _min?: InvestorMinOrderByAggregateInput
  }

  export type InvestorScalarWhereWithAggregatesInput = {
    AND?: InvestorScalarWhereWithAggregatesInput | InvestorScalarWhereWithAggregatesInput[]
    OR?: InvestorScalarWhereWithAggregatesInput[]
    NOT?: InvestorScalarWhereWithAggregatesInput | InvestorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Investor"> | string
    fullName?: StringWithAggregatesFilter<"Investor"> | string
    emailId?: StringWithAggregatesFilter<"Investor"> | string
    mobileNumber?: StringWithAggregatesFilter<"Investor"> | string
    dateofBirth?: DateTimeWithAggregatesFilter<"Investor"> | Date | string
    password?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    emailVerified?: BoolWithAggregatesFilter<"Investor"> | boolean
    phoneNumberVerified?: BoolWithAggregatesFilter<"Investor"> | boolean
    selfieImagePath?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    addressImagePath?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    employmentImagePath?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    additionalDocumentImagePath?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    industry?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    organization?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    roleAtWork?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    workingDuration?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    incomeRange?: EnumAnnualIncomeRangeNullableWithAggregatesFilter<"Investor"> | $Enums.AnnualIncomeRange | null
    profileUserImagePath?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    investmentPreference?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    addressOne?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    addressTwo?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    addressThree?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    pinCode?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    state?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    city?: StringNullableWithAggregatesFilter<"Investor"> | string | null
    accountDeactivate?: BoolWithAggregatesFilter<"Investor"> | boolean
    receiveNotification?: BoolWithAggregatesFilter<"Investor"> | boolean
    payMentMethod?: StringWithAggregatesFilter<"Investor"> | string
    role?: EnumRoleWithAggregatesFilter<"Investor"> | $Enums.Role
    fundsAvailable?: StringWithAggregatesFilter<"Investor"> | string
    expoPushToken?: StringNullableWithAggregatesFilter<"Investor"> | string | null
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: StringFilter<"Admin"> | string
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    name?: StringFilter<"Admin"> | string
    email?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    role?: EnumRoleFilter<"Admin"> | $Enums.Role
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    createdAt?: DateTimeFilter<"Admin"> | Date | string
    name?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    role?: EnumRoleFilter<"Admin"> | $Enums.Role
  }, "id" | "email">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Admin"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Admin"> | Date | string
    name?: StringWithAggregatesFilter<"Admin"> | string
    email?: StringWithAggregatesFilter<"Admin"> | string
    password?: StringWithAggregatesFilter<"Admin"> | string
    role?: EnumRoleWithAggregatesFilter<"Admin"> | $Enums.Role
  }

  export type PropertyWhereInput = {
    AND?: PropertyWhereInput | PropertyWhereInput[]
    OR?: PropertyWhereInput[]
    NOT?: PropertyWhereInput | PropertyWhereInput[]
    id?: StringFilter<"Property"> | string
    propertyName?: StringFilter<"Property"> | string
    propertyLocation?: StringFilter<"Property"> | string
    propertyImagePath?: StringFilter<"Property"> | string
    propertyVideoPath?: StringNullableFilter<"Property"> | string | null
    totalAssetValue?: StringFilter<"Property"> | string
    totalAssetValueLeft?: StringFilter<"Property"> | string
    totalToken?: StringFilter<"Property"> | string
    ageGrowth?: FloatFilter<"Property"> | number
    lockPeriod?: StringFilter<"Property"> | string
    createdAt?: DateTimeFilter<"Property"> | Date | string
    updatedAt?: DateTimeFilter<"Property"> | Date | string
    amountInvestedByMe?: FloatFilter<"Property"> | number
    aboutTotalAssetValue?: StringFilter<"Property"> | string
    myTokenOnProperty?: FloatFilter<"Property"> | number
    tokenLeft?: StringFilter<"Property"> | string
    sharedType?: StringFilter<"Property"> | string
    aboutSharedType?: StringFilter<"Property"> | string
    holdingCompany?: StringFilter<"Property"> | string
    aboutHoldingCompany?: StringFilter<"Property"> | string
    aboutProperty?: StringFilter<"Property"> | string
    propertyAmmenitiesImagePath?: StringFilter<"Property"> | string
    titleDeedDocumentPath?: StringFilter<"Property"> | string
    floorLayoutDocumentPath?: StringFilter<"Property"> | string
    companyDetailsDocumentPath?: StringFilter<"Property"> | string
    ownerShipDocumentPath?: StringFilter<"Property"> | string
    otherDocumenthPath?: StringNullableFilter<"Property"> | string | null
    faqs?: StringFilter<"Property"> | string
    investors?: PropertyInvestorListRelationFilter
    bookmarks?: BookmarkListRelationFilter
  }

  export type PropertyOrderByWithRelationInput = {
    id?: SortOrder
    propertyName?: SortOrder
    propertyLocation?: SortOrder
    propertyImagePath?: SortOrder
    propertyVideoPath?: SortOrder
    totalAssetValue?: SortOrder
    totalAssetValueLeft?: SortOrder
    totalToken?: SortOrder
    ageGrowth?: SortOrder
    lockPeriod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    amountInvestedByMe?: SortOrder
    aboutTotalAssetValue?: SortOrder
    myTokenOnProperty?: SortOrder
    tokenLeft?: SortOrder
    sharedType?: SortOrder
    aboutSharedType?: SortOrder
    holdingCompany?: SortOrder
    aboutHoldingCompany?: SortOrder
    aboutProperty?: SortOrder
    propertyAmmenitiesImagePath?: SortOrder
    titleDeedDocumentPath?: SortOrder
    floorLayoutDocumentPath?: SortOrder
    companyDetailsDocumentPath?: SortOrder
    ownerShipDocumentPath?: SortOrder
    otherDocumenthPath?: SortOrder
    faqs?: SortOrder
    investors?: PropertyInvestorOrderByRelationAggregateInput
    bookmarks?: BookmarkOrderByRelationAggregateInput
  }

  export type PropertyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PropertyWhereInput | PropertyWhereInput[]
    OR?: PropertyWhereInput[]
    NOT?: PropertyWhereInput | PropertyWhereInput[]
    propertyName?: StringFilter<"Property"> | string
    propertyLocation?: StringFilter<"Property"> | string
    propertyImagePath?: StringFilter<"Property"> | string
    propertyVideoPath?: StringNullableFilter<"Property"> | string | null
    totalAssetValue?: StringFilter<"Property"> | string
    totalAssetValueLeft?: StringFilter<"Property"> | string
    totalToken?: StringFilter<"Property"> | string
    ageGrowth?: FloatFilter<"Property"> | number
    lockPeriod?: StringFilter<"Property"> | string
    createdAt?: DateTimeFilter<"Property"> | Date | string
    updatedAt?: DateTimeFilter<"Property"> | Date | string
    amountInvestedByMe?: FloatFilter<"Property"> | number
    aboutTotalAssetValue?: StringFilter<"Property"> | string
    myTokenOnProperty?: FloatFilter<"Property"> | number
    tokenLeft?: StringFilter<"Property"> | string
    sharedType?: StringFilter<"Property"> | string
    aboutSharedType?: StringFilter<"Property"> | string
    holdingCompany?: StringFilter<"Property"> | string
    aboutHoldingCompany?: StringFilter<"Property"> | string
    aboutProperty?: StringFilter<"Property"> | string
    propertyAmmenitiesImagePath?: StringFilter<"Property"> | string
    titleDeedDocumentPath?: StringFilter<"Property"> | string
    floorLayoutDocumentPath?: StringFilter<"Property"> | string
    companyDetailsDocumentPath?: StringFilter<"Property"> | string
    ownerShipDocumentPath?: StringFilter<"Property"> | string
    otherDocumenthPath?: StringNullableFilter<"Property"> | string | null
    faqs?: StringFilter<"Property"> | string
    investors?: PropertyInvestorListRelationFilter
    bookmarks?: BookmarkListRelationFilter
  }, "id">

  export type PropertyOrderByWithAggregationInput = {
    id?: SortOrder
    propertyName?: SortOrder
    propertyLocation?: SortOrder
    propertyImagePath?: SortOrder
    propertyVideoPath?: SortOrder
    totalAssetValue?: SortOrder
    totalAssetValueLeft?: SortOrder
    totalToken?: SortOrder
    ageGrowth?: SortOrder
    lockPeriod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    amountInvestedByMe?: SortOrder
    aboutTotalAssetValue?: SortOrder
    myTokenOnProperty?: SortOrder
    tokenLeft?: SortOrder
    sharedType?: SortOrder
    aboutSharedType?: SortOrder
    holdingCompany?: SortOrder
    aboutHoldingCompany?: SortOrder
    aboutProperty?: SortOrder
    propertyAmmenitiesImagePath?: SortOrder
    titleDeedDocumentPath?: SortOrder
    floorLayoutDocumentPath?: SortOrder
    companyDetailsDocumentPath?: SortOrder
    ownerShipDocumentPath?: SortOrder
    otherDocumenthPath?: SortOrder
    faqs?: SortOrder
    _count?: PropertyCountOrderByAggregateInput
    _avg?: PropertyAvgOrderByAggregateInput
    _max?: PropertyMaxOrderByAggregateInput
    _min?: PropertyMinOrderByAggregateInput
    _sum?: PropertySumOrderByAggregateInput
  }

  export type PropertyScalarWhereWithAggregatesInput = {
    AND?: PropertyScalarWhereWithAggregatesInput | PropertyScalarWhereWithAggregatesInput[]
    OR?: PropertyScalarWhereWithAggregatesInput[]
    NOT?: PropertyScalarWhereWithAggregatesInput | PropertyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Property"> | string
    propertyName?: StringWithAggregatesFilter<"Property"> | string
    propertyLocation?: StringWithAggregatesFilter<"Property"> | string
    propertyImagePath?: StringWithAggregatesFilter<"Property"> | string
    propertyVideoPath?: StringNullableWithAggregatesFilter<"Property"> | string | null
    totalAssetValue?: StringWithAggregatesFilter<"Property"> | string
    totalAssetValueLeft?: StringWithAggregatesFilter<"Property"> | string
    totalToken?: StringWithAggregatesFilter<"Property"> | string
    ageGrowth?: FloatWithAggregatesFilter<"Property"> | number
    lockPeriod?: StringWithAggregatesFilter<"Property"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Property"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Property"> | Date | string
    amountInvestedByMe?: FloatWithAggregatesFilter<"Property"> | number
    aboutTotalAssetValue?: StringWithAggregatesFilter<"Property"> | string
    myTokenOnProperty?: FloatWithAggregatesFilter<"Property"> | number
    tokenLeft?: StringWithAggregatesFilter<"Property"> | string
    sharedType?: StringWithAggregatesFilter<"Property"> | string
    aboutSharedType?: StringWithAggregatesFilter<"Property"> | string
    holdingCompany?: StringWithAggregatesFilter<"Property"> | string
    aboutHoldingCompany?: StringWithAggregatesFilter<"Property"> | string
    aboutProperty?: StringWithAggregatesFilter<"Property"> | string
    propertyAmmenitiesImagePath?: StringWithAggregatesFilter<"Property"> | string
    titleDeedDocumentPath?: StringWithAggregatesFilter<"Property"> | string
    floorLayoutDocumentPath?: StringWithAggregatesFilter<"Property"> | string
    companyDetailsDocumentPath?: StringWithAggregatesFilter<"Property"> | string
    ownerShipDocumentPath?: StringWithAggregatesFilter<"Property"> | string
    otherDocumenthPath?: StringNullableWithAggregatesFilter<"Property"> | string | null
    faqs?: StringWithAggregatesFilter<"Property"> | string
  }

  export type PropertyInvestorWhereInput = {
    AND?: PropertyInvestorWhereInput | PropertyInvestorWhereInput[]
    OR?: PropertyInvestorWhereInput[]
    NOT?: PropertyInvestorWhereInput | PropertyInvestorWhereInput[]
    id?: StringFilter<"PropertyInvestor"> | string
    investorId?: StringFilter<"PropertyInvestor"> | string
    propertyId?: StringFilter<"PropertyInvestor"> | string
    investor?: XOR<InvestorRelationFilter, InvestorWhereInput>
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
  }

  export type PropertyInvestorOrderByWithRelationInput = {
    id?: SortOrder
    investorId?: SortOrder
    propertyId?: SortOrder
    investor?: InvestorOrderByWithRelationInput
    property?: PropertyOrderByWithRelationInput
  }

  export type PropertyInvestorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PropertyInvestorWhereInput | PropertyInvestorWhereInput[]
    OR?: PropertyInvestorWhereInput[]
    NOT?: PropertyInvestorWhereInput | PropertyInvestorWhereInput[]
    investorId?: StringFilter<"PropertyInvestor"> | string
    propertyId?: StringFilter<"PropertyInvestor"> | string
    investor?: XOR<InvestorRelationFilter, InvestorWhereInput>
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
  }, "id">

  export type PropertyInvestorOrderByWithAggregationInput = {
    id?: SortOrder
    investorId?: SortOrder
    propertyId?: SortOrder
    _count?: PropertyInvestorCountOrderByAggregateInput
    _max?: PropertyInvestorMaxOrderByAggregateInput
    _min?: PropertyInvestorMinOrderByAggregateInput
  }

  export type PropertyInvestorScalarWhereWithAggregatesInput = {
    AND?: PropertyInvestorScalarWhereWithAggregatesInput | PropertyInvestorScalarWhereWithAggregatesInput[]
    OR?: PropertyInvestorScalarWhereWithAggregatesInput[]
    NOT?: PropertyInvestorScalarWhereWithAggregatesInput | PropertyInvestorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PropertyInvestor"> | string
    investorId?: StringWithAggregatesFilter<"PropertyInvestor"> | string
    propertyId?: StringWithAggregatesFilter<"PropertyInvestor"> | string
  }

  export type BookmarkWhereInput = {
    AND?: BookmarkWhereInput | BookmarkWhereInput[]
    OR?: BookmarkWhereInput[]
    NOT?: BookmarkWhereInput | BookmarkWhereInput[]
    id?: StringFilter<"Bookmark"> | string
    investorId?: StringFilter<"Bookmark"> | string
    propertyId?: StringFilter<"Bookmark"> | string
    createdAt?: DateTimeFilter<"Bookmark"> | Date | string
    investor?: XOR<InvestorRelationFilter, InvestorWhereInput>
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
  }

  export type BookmarkOrderByWithRelationInput = {
    id?: SortOrder
    investorId?: SortOrder
    propertyId?: SortOrder
    createdAt?: SortOrder
    investor?: InvestorOrderByWithRelationInput
    property?: PropertyOrderByWithRelationInput
  }

  export type BookmarkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BookmarkWhereInput | BookmarkWhereInput[]
    OR?: BookmarkWhereInput[]
    NOT?: BookmarkWhereInput | BookmarkWhereInput[]
    investorId?: StringFilter<"Bookmark"> | string
    propertyId?: StringFilter<"Bookmark"> | string
    createdAt?: DateTimeFilter<"Bookmark"> | Date | string
    investor?: XOR<InvestorRelationFilter, InvestorWhereInput>
    property?: XOR<PropertyRelationFilter, PropertyWhereInput>
  }, "id">

  export type BookmarkOrderByWithAggregationInput = {
    id?: SortOrder
    investorId?: SortOrder
    propertyId?: SortOrder
    createdAt?: SortOrder
    _count?: BookmarkCountOrderByAggregateInput
    _max?: BookmarkMaxOrderByAggregateInput
    _min?: BookmarkMinOrderByAggregateInput
  }

  export type BookmarkScalarWhereWithAggregatesInput = {
    AND?: BookmarkScalarWhereWithAggregatesInput | BookmarkScalarWhereWithAggregatesInput[]
    OR?: BookmarkScalarWhereWithAggregatesInput[]
    NOT?: BookmarkScalarWhereWithAggregatesInput | BookmarkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Bookmark"> | string
    investorId?: StringWithAggregatesFilter<"Bookmark"> | string
    propertyId?: StringWithAggregatesFilter<"Bookmark"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Bookmark"> | Date | string
  }

  export type InvestorCreateInput = {
    id?: string
    fullName: string
    emailId: string
    mobileNumber: string
    dateofBirth: Date | string
    password?: string | null
    emailVerified?: boolean
    phoneNumberVerified?: boolean
    selfieImagePath?: string | null
    addressImagePath?: string | null
    employmentImagePath?: string | null
    additionalDocumentImagePath?: string | null
    industry?: string | null
    organization?: string | null
    roleAtWork?: string | null
    workingDuration?: string | null
    incomeRange?: $Enums.AnnualIncomeRange | null
    profileUserImagePath?: string | null
    investmentPreference?: string | null
    addressOne?: string | null
    addressTwo?: string | null
    addressThree?: string | null
    pinCode?: string | null
    state?: string | null
    city?: string | null
    accountDeactivate?: boolean
    receiveNotification?: boolean
    payMentMethod?: string
    role: $Enums.Role
    fundsAvailable?: string
    expoPushToken?: string | null
    properties?: PropertyInvestorCreateNestedManyWithoutInvestorInput
    bookmarks?: BookmarkCreateNestedManyWithoutInvestorInput
  }

  export type InvestorUncheckedCreateInput = {
    id?: string
    fullName: string
    emailId: string
    mobileNumber: string
    dateofBirth: Date | string
    password?: string | null
    emailVerified?: boolean
    phoneNumberVerified?: boolean
    selfieImagePath?: string | null
    addressImagePath?: string | null
    employmentImagePath?: string | null
    additionalDocumentImagePath?: string | null
    industry?: string | null
    organization?: string | null
    roleAtWork?: string | null
    workingDuration?: string | null
    incomeRange?: $Enums.AnnualIncomeRange | null
    profileUserImagePath?: string | null
    investmentPreference?: string | null
    addressOne?: string | null
    addressTwo?: string | null
    addressThree?: string | null
    pinCode?: string | null
    state?: string | null
    city?: string | null
    accountDeactivate?: boolean
    receiveNotification?: boolean
    payMentMethod?: string
    role: $Enums.Role
    fundsAvailable?: string
    expoPushToken?: string | null
    properties?: PropertyInvestorUncheckedCreateNestedManyWithoutInvestorInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutInvestorInput
  }

  export type InvestorUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    dateofBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumberVerified?: BoolFieldUpdateOperationsInput | boolean
    selfieImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    addressImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    employmentImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    additionalDocumentImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    roleAtWork?: NullableStringFieldUpdateOperationsInput | string | null
    workingDuration?: NullableStringFieldUpdateOperationsInput | string | null
    incomeRange?: NullableEnumAnnualIncomeRangeFieldUpdateOperationsInput | $Enums.AnnualIncomeRange | null
    profileUserImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    investmentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    addressOne?: NullableStringFieldUpdateOperationsInput | string | null
    addressTwo?: NullableStringFieldUpdateOperationsInput | string | null
    addressThree?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    accountDeactivate?: BoolFieldUpdateOperationsInput | boolean
    receiveNotification?: BoolFieldUpdateOperationsInput | boolean
    payMentMethod?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    fundsAvailable?: StringFieldUpdateOperationsInput | string
    expoPushToken?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: PropertyInvestorUpdateManyWithoutInvestorNestedInput
    bookmarks?: BookmarkUpdateManyWithoutInvestorNestedInput
  }

  export type InvestorUncheckedUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    dateofBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumberVerified?: BoolFieldUpdateOperationsInput | boolean
    selfieImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    addressImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    employmentImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    additionalDocumentImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    roleAtWork?: NullableStringFieldUpdateOperationsInput | string | null
    workingDuration?: NullableStringFieldUpdateOperationsInput | string | null
    incomeRange?: NullableEnumAnnualIncomeRangeFieldUpdateOperationsInput | $Enums.AnnualIncomeRange | null
    profileUserImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    investmentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    addressOne?: NullableStringFieldUpdateOperationsInput | string | null
    addressTwo?: NullableStringFieldUpdateOperationsInput | string | null
    addressThree?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    accountDeactivate?: BoolFieldUpdateOperationsInput | boolean
    receiveNotification?: BoolFieldUpdateOperationsInput | boolean
    payMentMethod?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    fundsAvailable?: StringFieldUpdateOperationsInput | string
    expoPushToken?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: PropertyInvestorUncheckedUpdateManyWithoutInvestorNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutInvestorNestedInput
  }

  export type InvestorCreateManyInput = {
    id?: string
    fullName: string
    emailId: string
    mobileNumber: string
    dateofBirth: Date | string
    password?: string | null
    emailVerified?: boolean
    phoneNumberVerified?: boolean
    selfieImagePath?: string | null
    addressImagePath?: string | null
    employmentImagePath?: string | null
    additionalDocumentImagePath?: string | null
    industry?: string | null
    organization?: string | null
    roleAtWork?: string | null
    workingDuration?: string | null
    incomeRange?: $Enums.AnnualIncomeRange | null
    profileUserImagePath?: string | null
    investmentPreference?: string | null
    addressOne?: string | null
    addressTwo?: string | null
    addressThree?: string | null
    pinCode?: string | null
    state?: string | null
    city?: string | null
    accountDeactivate?: boolean
    receiveNotification?: boolean
    payMentMethod?: string
    role: $Enums.Role
    fundsAvailable?: string
    expoPushToken?: string | null
  }

  export type InvestorUpdateManyMutationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    dateofBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumberVerified?: BoolFieldUpdateOperationsInput | boolean
    selfieImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    addressImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    employmentImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    additionalDocumentImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    roleAtWork?: NullableStringFieldUpdateOperationsInput | string | null
    workingDuration?: NullableStringFieldUpdateOperationsInput | string | null
    incomeRange?: NullableEnumAnnualIncomeRangeFieldUpdateOperationsInput | $Enums.AnnualIncomeRange | null
    profileUserImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    investmentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    addressOne?: NullableStringFieldUpdateOperationsInput | string | null
    addressTwo?: NullableStringFieldUpdateOperationsInput | string | null
    addressThree?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    accountDeactivate?: BoolFieldUpdateOperationsInput | boolean
    receiveNotification?: BoolFieldUpdateOperationsInput | boolean
    payMentMethod?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    fundsAvailable?: StringFieldUpdateOperationsInput | string
    expoPushToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type InvestorUncheckedUpdateManyInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    dateofBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumberVerified?: BoolFieldUpdateOperationsInput | boolean
    selfieImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    addressImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    employmentImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    additionalDocumentImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    roleAtWork?: NullableStringFieldUpdateOperationsInput | string | null
    workingDuration?: NullableStringFieldUpdateOperationsInput | string | null
    incomeRange?: NullableEnumAnnualIncomeRangeFieldUpdateOperationsInput | $Enums.AnnualIncomeRange | null
    profileUserImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    investmentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    addressOne?: NullableStringFieldUpdateOperationsInput | string | null
    addressTwo?: NullableStringFieldUpdateOperationsInput | string | null
    addressThree?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    accountDeactivate?: BoolFieldUpdateOperationsInput | boolean
    receiveNotification?: BoolFieldUpdateOperationsInput | boolean
    payMentMethod?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    fundsAvailable?: StringFieldUpdateOperationsInput | string
    expoPushToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminCreateInput = {
    id?: string
    createdAt?: Date | string
    name: string
    email: string
    password: string
    role: $Enums.Role
  }

  export type AdminUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    name: string
    email: string
    password: string
    role: $Enums.Role
  }

  export type AdminUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type AdminUncheckedUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type AdminCreateManyInput = {
    id?: string
    createdAt?: Date | string
    name: string
    email: string
    password: string
    role: $Enums.Role
  }

  export type AdminUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type AdminUncheckedUpdateManyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type PropertyCreateInput = {
    id?: string
    propertyName: string
    propertyLocation: string
    propertyImagePath: string
    propertyVideoPath?: string | null
    totalAssetValue: string
    totalAssetValueLeft: string
    totalToken: string
    ageGrowth?: number
    lockPeriod?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    amountInvestedByMe?: number
    aboutTotalAssetValue: string
    myTokenOnProperty?: number
    tokenLeft: string
    sharedType: string
    aboutSharedType: string
    holdingCompany: string
    aboutHoldingCompany: string
    aboutProperty: string
    propertyAmmenitiesImagePath: string
    titleDeedDocumentPath: string
    floorLayoutDocumentPath: string
    companyDetailsDocumentPath: string
    ownerShipDocumentPath: string
    otherDocumenthPath?: string | null
    faqs: string
    investors?: PropertyInvestorCreateNestedManyWithoutPropertyInput
    bookmarks?: BookmarkCreateNestedManyWithoutPropertyInput
  }

  export type PropertyUncheckedCreateInput = {
    id?: string
    propertyName: string
    propertyLocation: string
    propertyImagePath: string
    propertyVideoPath?: string | null
    totalAssetValue: string
    totalAssetValueLeft: string
    totalToken: string
    ageGrowth?: number
    lockPeriod?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    amountInvestedByMe?: number
    aboutTotalAssetValue: string
    myTokenOnProperty?: number
    tokenLeft: string
    sharedType: string
    aboutSharedType: string
    holdingCompany: string
    aboutHoldingCompany: string
    aboutProperty: string
    propertyAmmenitiesImagePath: string
    titleDeedDocumentPath: string
    floorLayoutDocumentPath: string
    companyDetailsDocumentPath: string
    ownerShipDocumentPath: string
    otherDocumenthPath?: string | null
    faqs: string
    investors?: PropertyInvestorUncheckedCreateNestedManyWithoutPropertyInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type PropertyUpdateInput = {
    propertyName?: StringFieldUpdateOperationsInput | string
    propertyLocation?: StringFieldUpdateOperationsInput | string
    propertyImagePath?: StringFieldUpdateOperationsInput | string
    propertyVideoPath?: NullableStringFieldUpdateOperationsInput | string | null
    totalAssetValue?: StringFieldUpdateOperationsInput | string
    totalAssetValueLeft?: StringFieldUpdateOperationsInput | string
    totalToken?: StringFieldUpdateOperationsInput | string
    ageGrowth?: FloatFieldUpdateOperationsInput | number
    lockPeriod?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amountInvestedByMe?: FloatFieldUpdateOperationsInput | number
    aboutTotalAssetValue?: StringFieldUpdateOperationsInput | string
    myTokenOnProperty?: FloatFieldUpdateOperationsInput | number
    tokenLeft?: StringFieldUpdateOperationsInput | string
    sharedType?: StringFieldUpdateOperationsInput | string
    aboutSharedType?: StringFieldUpdateOperationsInput | string
    holdingCompany?: StringFieldUpdateOperationsInput | string
    aboutHoldingCompany?: StringFieldUpdateOperationsInput | string
    aboutProperty?: StringFieldUpdateOperationsInput | string
    propertyAmmenitiesImagePath?: StringFieldUpdateOperationsInput | string
    titleDeedDocumentPath?: StringFieldUpdateOperationsInput | string
    floorLayoutDocumentPath?: StringFieldUpdateOperationsInput | string
    companyDetailsDocumentPath?: StringFieldUpdateOperationsInput | string
    ownerShipDocumentPath?: StringFieldUpdateOperationsInput | string
    otherDocumenthPath?: NullableStringFieldUpdateOperationsInput | string | null
    faqs?: StringFieldUpdateOperationsInput | string
    investors?: PropertyInvestorUpdateManyWithoutPropertyNestedInput
    bookmarks?: BookmarkUpdateManyWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateInput = {
    propertyName?: StringFieldUpdateOperationsInput | string
    propertyLocation?: StringFieldUpdateOperationsInput | string
    propertyImagePath?: StringFieldUpdateOperationsInput | string
    propertyVideoPath?: NullableStringFieldUpdateOperationsInput | string | null
    totalAssetValue?: StringFieldUpdateOperationsInput | string
    totalAssetValueLeft?: StringFieldUpdateOperationsInput | string
    totalToken?: StringFieldUpdateOperationsInput | string
    ageGrowth?: FloatFieldUpdateOperationsInput | number
    lockPeriod?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amountInvestedByMe?: FloatFieldUpdateOperationsInput | number
    aboutTotalAssetValue?: StringFieldUpdateOperationsInput | string
    myTokenOnProperty?: FloatFieldUpdateOperationsInput | number
    tokenLeft?: StringFieldUpdateOperationsInput | string
    sharedType?: StringFieldUpdateOperationsInput | string
    aboutSharedType?: StringFieldUpdateOperationsInput | string
    holdingCompany?: StringFieldUpdateOperationsInput | string
    aboutHoldingCompany?: StringFieldUpdateOperationsInput | string
    aboutProperty?: StringFieldUpdateOperationsInput | string
    propertyAmmenitiesImagePath?: StringFieldUpdateOperationsInput | string
    titleDeedDocumentPath?: StringFieldUpdateOperationsInput | string
    floorLayoutDocumentPath?: StringFieldUpdateOperationsInput | string
    companyDetailsDocumentPath?: StringFieldUpdateOperationsInput | string
    ownerShipDocumentPath?: StringFieldUpdateOperationsInput | string
    otherDocumenthPath?: NullableStringFieldUpdateOperationsInput | string | null
    faqs?: StringFieldUpdateOperationsInput | string
    investors?: PropertyInvestorUncheckedUpdateManyWithoutPropertyNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type PropertyCreateManyInput = {
    id?: string
    propertyName: string
    propertyLocation: string
    propertyImagePath: string
    propertyVideoPath?: string | null
    totalAssetValue: string
    totalAssetValueLeft: string
    totalToken: string
    ageGrowth?: number
    lockPeriod?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    amountInvestedByMe?: number
    aboutTotalAssetValue: string
    myTokenOnProperty?: number
    tokenLeft: string
    sharedType: string
    aboutSharedType: string
    holdingCompany: string
    aboutHoldingCompany: string
    aboutProperty: string
    propertyAmmenitiesImagePath: string
    titleDeedDocumentPath: string
    floorLayoutDocumentPath: string
    companyDetailsDocumentPath: string
    ownerShipDocumentPath: string
    otherDocumenthPath?: string | null
    faqs: string
  }

  export type PropertyUpdateManyMutationInput = {
    propertyName?: StringFieldUpdateOperationsInput | string
    propertyLocation?: StringFieldUpdateOperationsInput | string
    propertyImagePath?: StringFieldUpdateOperationsInput | string
    propertyVideoPath?: NullableStringFieldUpdateOperationsInput | string | null
    totalAssetValue?: StringFieldUpdateOperationsInput | string
    totalAssetValueLeft?: StringFieldUpdateOperationsInput | string
    totalToken?: StringFieldUpdateOperationsInput | string
    ageGrowth?: FloatFieldUpdateOperationsInput | number
    lockPeriod?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amountInvestedByMe?: FloatFieldUpdateOperationsInput | number
    aboutTotalAssetValue?: StringFieldUpdateOperationsInput | string
    myTokenOnProperty?: FloatFieldUpdateOperationsInput | number
    tokenLeft?: StringFieldUpdateOperationsInput | string
    sharedType?: StringFieldUpdateOperationsInput | string
    aboutSharedType?: StringFieldUpdateOperationsInput | string
    holdingCompany?: StringFieldUpdateOperationsInput | string
    aboutHoldingCompany?: StringFieldUpdateOperationsInput | string
    aboutProperty?: StringFieldUpdateOperationsInput | string
    propertyAmmenitiesImagePath?: StringFieldUpdateOperationsInput | string
    titleDeedDocumentPath?: StringFieldUpdateOperationsInput | string
    floorLayoutDocumentPath?: StringFieldUpdateOperationsInput | string
    companyDetailsDocumentPath?: StringFieldUpdateOperationsInput | string
    ownerShipDocumentPath?: StringFieldUpdateOperationsInput | string
    otherDocumenthPath?: NullableStringFieldUpdateOperationsInput | string | null
    faqs?: StringFieldUpdateOperationsInput | string
  }

  export type PropertyUncheckedUpdateManyInput = {
    propertyName?: StringFieldUpdateOperationsInput | string
    propertyLocation?: StringFieldUpdateOperationsInput | string
    propertyImagePath?: StringFieldUpdateOperationsInput | string
    propertyVideoPath?: NullableStringFieldUpdateOperationsInput | string | null
    totalAssetValue?: StringFieldUpdateOperationsInput | string
    totalAssetValueLeft?: StringFieldUpdateOperationsInput | string
    totalToken?: StringFieldUpdateOperationsInput | string
    ageGrowth?: FloatFieldUpdateOperationsInput | number
    lockPeriod?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amountInvestedByMe?: FloatFieldUpdateOperationsInput | number
    aboutTotalAssetValue?: StringFieldUpdateOperationsInput | string
    myTokenOnProperty?: FloatFieldUpdateOperationsInput | number
    tokenLeft?: StringFieldUpdateOperationsInput | string
    sharedType?: StringFieldUpdateOperationsInput | string
    aboutSharedType?: StringFieldUpdateOperationsInput | string
    holdingCompany?: StringFieldUpdateOperationsInput | string
    aboutHoldingCompany?: StringFieldUpdateOperationsInput | string
    aboutProperty?: StringFieldUpdateOperationsInput | string
    propertyAmmenitiesImagePath?: StringFieldUpdateOperationsInput | string
    titleDeedDocumentPath?: StringFieldUpdateOperationsInput | string
    floorLayoutDocumentPath?: StringFieldUpdateOperationsInput | string
    companyDetailsDocumentPath?: StringFieldUpdateOperationsInput | string
    ownerShipDocumentPath?: StringFieldUpdateOperationsInput | string
    otherDocumenthPath?: NullableStringFieldUpdateOperationsInput | string | null
    faqs?: StringFieldUpdateOperationsInput | string
  }

  export type PropertyInvestorCreateInput = {
    id?: string
    investor: InvestorCreateNestedOneWithoutPropertiesInput
    property: PropertyCreateNestedOneWithoutInvestorsInput
  }

  export type PropertyInvestorUncheckedCreateInput = {
    id?: string
    investorId: string
    propertyId: string
  }

  export type PropertyInvestorUpdateInput = {
    investor?: InvestorUpdateOneRequiredWithoutPropertiesNestedInput
    property?: PropertyUpdateOneRequiredWithoutInvestorsNestedInput
  }

  export type PropertyInvestorUncheckedUpdateInput = {
    investorId?: StringFieldUpdateOperationsInput | string
    propertyId?: StringFieldUpdateOperationsInput | string
  }

  export type PropertyInvestorCreateManyInput = {
    id?: string
    investorId: string
    propertyId: string
  }

  export type PropertyInvestorUpdateManyMutationInput = {

  }

  export type PropertyInvestorUncheckedUpdateManyInput = {
    investorId?: StringFieldUpdateOperationsInput | string
    propertyId?: StringFieldUpdateOperationsInput | string
  }

  export type BookmarkCreateInput = {
    id?: string
    createdAt?: Date | string
    investor: InvestorCreateNestedOneWithoutBookmarksInput
    property: PropertyCreateNestedOneWithoutBookmarksInput
  }

  export type BookmarkUncheckedCreateInput = {
    id?: string
    investorId: string
    propertyId: string
    createdAt?: Date | string
  }

  export type BookmarkUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    investor?: InvestorUpdateOneRequiredWithoutBookmarksNestedInput
    property?: PropertyUpdateOneRequiredWithoutBookmarksNestedInput
  }

  export type BookmarkUncheckedUpdateInput = {
    investorId?: StringFieldUpdateOperationsInput | string
    propertyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkCreateManyInput = {
    id?: string
    investorId: string
    propertyId: string
    createdAt?: Date | string
  }

  export type BookmarkUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkUncheckedUpdateManyInput = {
    investorId?: StringFieldUpdateOperationsInput | string
    propertyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumAnnualIncomeRangeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AnnualIncomeRange | EnumAnnualIncomeRangeFieldRefInput<$PrismaModel> | null
    in?: $Enums.AnnualIncomeRange[] | ListEnumAnnualIncomeRangeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AnnualIncomeRange[] | ListEnumAnnualIncomeRangeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAnnualIncomeRangeNullableFilter<$PrismaModel> | $Enums.AnnualIncomeRange | null
    isSet?: boolean
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type PropertyInvestorListRelationFilter = {
    every?: PropertyInvestorWhereInput
    some?: PropertyInvestorWhereInput
    none?: PropertyInvestorWhereInput
  }

  export type BookmarkListRelationFilter = {
    every?: BookmarkWhereInput
    some?: BookmarkWhereInput
    none?: BookmarkWhereInput
  }

  export type PropertyInvestorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookmarkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InvestorCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    emailId?: SortOrder
    mobileNumber?: SortOrder
    dateofBirth?: SortOrder
    password?: SortOrder
    emailVerified?: SortOrder
    phoneNumberVerified?: SortOrder
    selfieImagePath?: SortOrder
    addressImagePath?: SortOrder
    employmentImagePath?: SortOrder
    additionalDocumentImagePath?: SortOrder
    industry?: SortOrder
    organization?: SortOrder
    roleAtWork?: SortOrder
    workingDuration?: SortOrder
    incomeRange?: SortOrder
    profileUserImagePath?: SortOrder
    investmentPreference?: SortOrder
    addressOne?: SortOrder
    addressTwo?: SortOrder
    addressThree?: SortOrder
    pinCode?: SortOrder
    state?: SortOrder
    city?: SortOrder
    accountDeactivate?: SortOrder
    receiveNotification?: SortOrder
    payMentMethod?: SortOrder
    role?: SortOrder
    fundsAvailable?: SortOrder
    expoPushToken?: SortOrder
  }

  export type InvestorMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    emailId?: SortOrder
    mobileNumber?: SortOrder
    dateofBirth?: SortOrder
    password?: SortOrder
    emailVerified?: SortOrder
    phoneNumberVerified?: SortOrder
    selfieImagePath?: SortOrder
    addressImagePath?: SortOrder
    employmentImagePath?: SortOrder
    additionalDocumentImagePath?: SortOrder
    industry?: SortOrder
    organization?: SortOrder
    roleAtWork?: SortOrder
    workingDuration?: SortOrder
    incomeRange?: SortOrder
    profileUserImagePath?: SortOrder
    investmentPreference?: SortOrder
    addressOne?: SortOrder
    addressTwo?: SortOrder
    addressThree?: SortOrder
    pinCode?: SortOrder
    state?: SortOrder
    city?: SortOrder
    accountDeactivate?: SortOrder
    receiveNotification?: SortOrder
    payMentMethod?: SortOrder
    role?: SortOrder
    fundsAvailable?: SortOrder
    expoPushToken?: SortOrder
  }

  export type InvestorMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    emailId?: SortOrder
    mobileNumber?: SortOrder
    dateofBirth?: SortOrder
    password?: SortOrder
    emailVerified?: SortOrder
    phoneNumberVerified?: SortOrder
    selfieImagePath?: SortOrder
    addressImagePath?: SortOrder
    employmentImagePath?: SortOrder
    additionalDocumentImagePath?: SortOrder
    industry?: SortOrder
    organization?: SortOrder
    roleAtWork?: SortOrder
    workingDuration?: SortOrder
    incomeRange?: SortOrder
    profileUserImagePath?: SortOrder
    investmentPreference?: SortOrder
    addressOne?: SortOrder
    addressTwo?: SortOrder
    addressThree?: SortOrder
    pinCode?: SortOrder
    state?: SortOrder
    city?: SortOrder
    accountDeactivate?: SortOrder
    receiveNotification?: SortOrder
    payMentMethod?: SortOrder
    role?: SortOrder
    fundsAvailable?: SortOrder
    expoPushToken?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumAnnualIncomeRangeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnnualIncomeRange | EnumAnnualIncomeRangeFieldRefInput<$PrismaModel> | null
    in?: $Enums.AnnualIncomeRange[] | ListEnumAnnualIncomeRangeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AnnualIncomeRange[] | ListEnumAnnualIncomeRangeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAnnualIncomeRangeNullableWithAggregatesFilter<$PrismaModel> | $Enums.AnnualIncomeRange | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAnnualIncomeRangeNullableFilter<$PrismaModel>
    _max?: NestedEnumAnnualIncomeRangeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PropertyCountOrderByAggregateInput = {
    id?: SortOrder
    propertyName?: SortOrder
    propertyLocation?: SortOrder
    propertyImagePath?: SortOrder
    propertyVideoPath?: SortOrder
    totalAssetValue?: SortOrder
    totalAssetValueLeft?: SortOrder
    totalToken?: SortOrder
    ageGrowth?: SortOrder
    lockPeriod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    amountInvestedByMe?: SortOrder
    aboutTotalAssetValue?: SortOrder
    myTokenOnProperty?: SortOrder
    tokenLeft?: SortOrder
    sharedType?: SortOrder
    aboutSharedType?: SortOrder
    holdingCompany?: SortOrder
    aboutHoldingCompany?: SortOrder
    aboutProperty?: SortOrder
    propertyAmmenitiesImagePath?: SortOrder
    titleDeedDocumentPath?: SortOrder
    floorLayoutDocumentPath?: SortOrder
    companyDetailsDocumentPath?: SortOrder
    ownerShipDocumentPath?: SortOrder
    otherDocumenthPath?: SortOrder
    faqs?: SortOrder
  }

  export type PropertyAvgOrderByAggregateInput = {
    ageGrowth?: SortOrder
    amountInvestedByMe?: SortOrder
    myTokenOnProperty?: SortOrder
  }

  export type PropertyMaxOrderByAggregateInput = {
    id?: SortOrder
    propertyName?: SortOrder
    propertyLocation?: SortOrder
    propertyImagePath?: SortOrder
    propertyVideoPath?: SortOrder
    totalAssetValue?: SortOrder
    totalAssetValueLeft?: SortOrder
    totalToken?: SortOrder
    ageGrowth?: SortOrder
    lockPeriod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    amountInvestedByMe?: SortOrder
    aboutTotalAssetValue?: SortOrder
    myTokenOnProperty?: SortOrder
    tokenLeft?: SortOrder
    sharedType?: SortOrder
    aboutSharedType?: SortOrder
    holdingCompany?: SortOrder
    aboutHoldingCompany?: SortOrder
    aboutProperty?: SortOrder
    propertyAmmenitiesImagePath?: SortOrder
    titleDeedDocumentPath?: SortOrder
    floorLayoutDocumentPath?: SortOrder
    companyDetailsDocumentPath?: SortOrder
    ownerShipDocumentPath?: SortOrder
    otherDocumenthPath?: SortOrder
    faqs?: SortOrder
  }

  export type PropertyMinOrderByAggregateInput = {
    id?: SortOrder
    propertyName?: SortOrder
    propertyLocation?: SortOrder
    propertyImagePath?: SortOrder
    propertyVideoPath?: SortOrder
    totalAssetValue?: SortOrder
    totalAssetValueLeft?: SortOrder
    totalToken?: SortOrder
    ageGrowth?: SortOrder
    lockPeriod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    amountInvestedByMe?: SortOrder
    aboutTotalAssetValue?: SortOrder
    myTokenOnProperty?: SortOrder
    tokenLeft?: SortOrder
    sharedType?: SortOrder
    aboutSharedType?: SortOrder
    holdingCompany?: SortOrder
    aboutHoldingCompany?: SortOrder
    aboutProperty?: SortOrder
    propertyAmmenitiesImagePath?: SortOrder
    titleDeedDocumentPath?: SortOrder
    floorLayoutDocumentPath?: SortOrder
    companyDetailsDocumentPath?: SortOrder
    ownerShipDocumentPath?: SortOrder
    otherDocumenthPath?: SortOrder
    faqs?: SortOrder
  }

  export type PropertySumOrderByAggregateInput = {
    ageGrowth?: SortOrder
    amountInvestedByMe?: SortOrder
    myTokenOnProperty?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type InvestorRelationFilter = {
    is?: InvestorWhereInput
    isNot?: InvestorWhereInput
  }

  export type PropertyRelationFilter = {
    is?: PropertyWhereInput
    isNot?: PropertyWhereInput
  }

  export type PropertyInvestorCountOrderByAggregateInput = {
    id?: SortOrder
    investorId?: SortOrder
    propertyId?: SortOrder
  }

  export type PropertyInvestorMaxOrderByAggregateInput = {
    id?: SortOrder
    investorId?: SortOrder
    propertyId?: SortOrder
  }

  export type PropertyInvestorMinOrderByAggregateInput = {
    id?: SortOrder
    investorId?: SortOrder
    propertyId?: SortOrder
  }

  export type BookmarkCountOrderByAggregateInput = {
    id?: SortOrder
    investorId?: SortOrder
    propertyId?: SortOrder
    createdAt?: SortOrder
  }

  export type BookmarkMaxOrderByAggregateInput = {
    id?: SortOrder
    investorId?: SortOrder
    propertyId?: SortOrder
    createdAt?: SortOrder
  }

  export type BookmarkMinOrderByAggregateInput = {
    id?: SortOrder
    investorId?: SortOrder
    propertyId?: SortOrder
    createdAt?: SortOrder
  }

  export type PropertyInvestorCreateNestedManyWithoutInvestorInput = {
    create?: XOR<PropertyInvestorCreateWithoutInvestorInput, PropertyInvestorUncheckedCreateWithoutInvestorInput> | PropertyInvestorCreateWithoutInvestorInput[] | PropertyInvestorUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: PropertyInvestorCreateOrConnectWithoutInvestorInput | PropertyInvestorCreateOrConnectWithoutInvestorInput[]
    createMany?: PropertyInvestorCreateManyInvestorInputEnvelope
    connect?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
  }

  export type BookmarkCreateNestedManyWithoutInvestorInput = {
    create?: XOR<BookmarkCreateWithoutInvestorInput, BookmarkUncheckedCreateWithoutInvestorInput> | BookmarkCreateWithoutInvestorInput[] | BookmarkUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutInvestorInput | BookmarkCreateOrConnectWithoutInvestorInput[]
    createMany?: BookmarkCreateManyInvestorInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type PropertyInvestorUncheckedCreateNestedManyWithoutInvestorInput = {
    create?: XOR<PropertyInvestorCreateWithoutInvestorInput, PropertyInvestorUncheckedCreateWithoutInvestorInput> | PropertyInvestorCreateWithoutInvestorInput[] | PropertyInvestorUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: PropertyInvestorCreateOrConnectWithoutInvestorInput | PropertyInvestorCreateOrConnectWithoutInvestorInput[]
    createMany?: PropertyInvestorCreateManyInvestorInputEnvelope
    connect?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
  }

  export type BookmarkUncheckedCreateNestedManyWithoutInvestorInput = {
    create?: XOR<BookmarkCreateWithoutInvestorInput, BookmarkUncheckedCreateWithoutInvestorInput> | BookmarkCreateWithoutInvestorInput[] | BookmarkUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutInvestorInput | BookmarkCreateOrConnectWithoutInvestorInput[]
    createMany?: BookmarkCreateManyInvestorInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableEnumAnnualIncomeRangeFieldUpdateOperationsInput = {
    set?: $Enums.AnnualIncomeRange | null
    unset?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type PropertyInvestorUpdateManyWithoutInvestorNestedInput = {
    create?: XOR<PropertyInvestorCreateWithoutInvestorInput, PropertyInvestorUncheckedCreateWithoutInvestorInput> | PropertyInvestorCreateWithoutInvestorInput[] | PropertyInvestorUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: PropertyInvestorCreateOrConnectWithoutInvestorInput | PropertyInvestorCreateOrConnectWithoutInvestorInput[]
    upsert?: PropertyInvestorUpsertWithWhereUniqueWithoutInvestorInput | PropertyInvestorUpsertWithWhereUniqueWithoutInvestorInput[]
    createMany?: PropertyInvestorCreateManyInvestorInputEnvelope
    set?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
    disconnect?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
    delete?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
    connect?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
    update?: PropertyInvestorUpdateWithWhereUniqueWithoutInvestorInput | PropertyInvestorUpdateWithWhereUniqueWithoutInvestorInput[]
    updateMany?: PropertyInvestorUpdateManyWithWhereWithoutInvestorInput | PropertyInvestorUpdateManyWithWhereWithoutInvestorInput[]
    deleteMany?: PropertyInvestorScalarWhereInput | PropertyInvestorScalarWhereInput[]
  }

  export type BookmarkUpdateManyWithoutInvestorNestedInput = {
    create?: XOR<BookmarkCreateWithoutInvestorInput, BookmarkUncheckedCreateWithoutInvestorInput> | BookmarkCreateWithoutInvestorInput[] | BookmarkUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutInvestorInput | BookmarkCreateOrConnectWithoutInvestorInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutInvestorInput | BookmarkUpsertWithWhereUniqueWithoutInvestorInput[]
    createMany?: BookmarkCreateManyInvestorInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutInvestorInput | BookmarkUpdateWithWhereUniqueWithoutInvestorInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutInvestorInput | BookmarkUpdateManyWithWhereWithoutInvestorInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type PropertyInvestorUncheckedUpdateManyWithoutInvestorNestedInput = {
    create?: XOR<PropertyInvestorCreateWithoutInvestorInput, PropertyInvestorUncheckedCreateWithoutInvestorInput> | PropertyInvestorCreateWithoutInvestorInput[] | PropertyInvestorUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: PropertyInvestorCreateOrConnectWithoutInvestorInput | PropertyInvestorCreateOrConnectWithoutInvestorInput[]
    upsert?: PropertyInvestorUpsertWithWhereUniqueWithoutInvestorInput | PropertyInvestorUpsertWithWhereUniqueWithoutInvestorInput[]
    createMany?: PropertyInvestorCreateManyInvestorInputEnvelope
    set?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
    disconnect?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
    delete?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
    connect?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
    update?: PropertyInvestorUpdateWithWhereUniqueWithoutInvestorInput | PropertyInvestorUpdateWithWhereUniqueWithoutInvestorInput[]
    updateMany?: PropertyInvestorUpdateManyWithWhereWithoutInvestorInput | PropertyInvestorUpdateManyWithWhereWithoutInvestorInput[]
    deleteMany?: PropertyInvestorScalarWhereInput | PropertyInvestorScalarWhereInput[]
  }

  export type BookmarkUncheckedUpdateManyWithoutInvestorNestedInput = {
    create?: XOR<BookmarkCreateWithoutInvestorInput, BookmarkUncheckedCreateWithoutInvestorInput> | BookmarkCreateWithoutInvestorInput[] | BookmarkUncheckedCreateWithoutInvestorInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutInvestorInput | BookmarkCreateOrConnectWithoutInvestorInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutInvestorInput | BookmarkUpsertWithWhereUniqueWithoutInvestorInput[]
    createMany?: BookmarkCreateManyInvestorInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutInvestorInput | BookmarkUpdateWithWhereUniqueWithoutInvestorInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutInvestorInput | BookmarkUpdateManyWithWhereWithoutInvestorInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type PropertyInvestorCreateNestedManyWithoutPropertyInput = {
    create?: XOR<PropertyInvestorCreateWithoutPropertyInput, PropertyInvestorUncheckedCreateWithoutPropertyInput> | PropertyInvestorCreateWithoutPropertyInput[] | PropertyInvestorUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: PropertyInvestorCreateOrConnectWithoutPropertyInput | PropertyInvestorCreateOrConnectWithoutPropertyInput[]
    createMany?: PropertyInvestorCreateManyPropertyInputEnvelope
    connect?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
  }

  export type BookmarkCreateNestedManyWithoutPropertyInput = {
    create?: XOR<BookmarkCreateWithoutPropertyInput, BookmarkUncheckedCreateWithoutPropertyInput> | BookmarkCreateWithoutPropertyInput[] | BookmarkUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutPropertyInput | BookmarkCreateOrConnectWithoutPropertyInput[]
    createMany?: BookmarkCreateManyPropertyInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type PropertyInvestorUncheckedCreateNestedManyWithoutPropertyInput = {
    create?: XOR<PropertyInvestorCreateWithoutPropertyInput, PropertyInvestorUncheckedCreateWithoutPropertyInput> | PropertyInvestorCreateWithoutPropertyInput[] | PropertyInvestorUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: PropertyInvestorCreateOrConnectWithoutPropertyInput | PropertyInvestorCreateOrConnectWithoutPropertyInput[]
    createMany?: PropertyInvestorCreateManyPropertyInputEnvelope
    connect?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
  }

  export type BookmarkUncheckedCreateNestedManyWithoutPropertyInput = {
    create?: XOR<BookmarkCreateWithoutPropertyInput, BookmarkUncheckedCreateWithoutPropertyInput> | BookmarkCreateWithoutPropertyInput[] | BookmarkUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutPropertyInput | BookmarkCreateOrConnectWithoutPropertyInput[]
    createMany?: BookmarkCreateManyPropertyInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PropertyInvestorUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<PropertyInvestorCreateWithoutPropertyInput, PropertyInvestorUncheckedCreateWithoutPropertyInput> | PropertyInvestorCreateWithoutPropertyInput[] | PropertyInvestorUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: PropertyInvestorCreateOrConnectWithoutPropertyInput | PropertyInvestorCreateOrConnectWithoutPropertyInput[]
    upsert?: PropertyInvestorUpsertWithWhereUniqueWithoutPropertyInput | PropertyInvestorUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: PropertyInvestorCreateManyPropertyInputEnvelope
    set?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
    disconnect?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
    delete?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
    connect?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
    update?: PropertyInvestorUpdateWithWhereUniqueWithoutPropertyInput | PropertyInvestorUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: PropertyInvestorUpdateManyWithWhereWithoutPropertyInput | PropertyInvestorUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: PropertyInvestorScalarWhereInput | PropertyInvestorScalarWhereInput[]
  }

  export type BookmarkUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<BookmarkCreateWithoutPropertyInput, BookmarkUncheckedCreateWithoutPropertyInput> | BookmarkCreateWithoutPropertyInput[] | BookmarkUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutPropertyInput | BookmarkCreateOrConnectWithoutPropertyInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutPropertyInput | BookmarkUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: BookmarkCreateManyPropertyInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutPropertyInput | BookmarkUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutPropertyInput | BookmarkUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type PropertyInvestorUncheckedUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<PropertyInvestorCreateWithoutPropertyInput, PropertyInvestorUncheckedCreateWithoutPropertyInput> | PropertyInvestorCreateWithoutPropertyInput[] | PropertyInvestorUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: PropertyInvestorCreateOrConnectWithoutPropertyInput | PropertyInvestorCreateOrConnectWithoutPropertyInput[]
    upsert?: PropertyInvestorUpsertWithWhereUniqueWithoutPropertyInput | PropertyInvestorUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: PropertyInvestorCreateManyPropertyInputEnvelope
    set?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
    disconnect?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
    delete?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
    connect?: PropertyInvestorWhereUniqueInput | PropertyInvestorWhereUniqueInput[]
    update?: PropertyInvestorUpdateWithWhereUniqueWithoutPropertyInput | PropertyInvestorUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: PropertyInvestorUpdateManyWithWhereWithoutPropertyInput | PropertyInvestorUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: PropertyInvestorScalarWhereInput | PropertyInvestorScalarWhereInput[]
  }

  export type BookmarkUncheckedUpdateManyWithoutPropertyNestedInput = {
    create?: XOR<BookmarkCreateWithoutPropertyInput, BookmarkUncheckedCreateWithoutPropertyInput> | BookmarkCreateWithoutPropertyInput[] | BookmarkUncheckedCreateWithoutPropertyInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutPropertyInput | BookmarkCreateOrConnectWithoutPropertyInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutPropertyInput | BookmarkUpsertWithWhereUniqueWithoutPropertyInput[]
    createMany?: BookmarkCreateManyPropertyInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutPropertyInput | BookmarkUpdateWithWhereUniqueWithoutPropertyInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutPropertyInput | BookmarkUpdateManyWithWhereWithoutPropertyInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type InvestorCreateNestedOneWithoutPropertiesInput = {
    create?: XOR<InvestorCreateWithoutPropertiesInput, InvestorUncheckedCreateWithoutPropertiesInput>
    connectOrCreate?: InvestorCreateOrConnectWithoutPropertiesInput
    connect?: InvestorWhereUniqueInput
  }

  export type PropertyCreateNestedOneWithoutInvestorsInput = {
    create?: XOR<PropertyCreateWithoutInvestorsInput, PropertyUncheckedCreateWithoutInvestorsInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutInvestorsInput
    connect?: PropertyWhereUniqueInput
  }

  export type InvestorUpdateOneRequiredWithoutPropertiesNestedInput = {
    create?: XOR<InvestorCreateWithoutPropertiesInput, InvestorUncheckedCreateWithoutPropertiesInput>
    connectOrCreate?: InvestorCreateOrConnectWithoutPropertiesInput
    upsert?: InvestorUpsertWithoutPropertiesInput
    connect?: InvestorWhereUniqueInput
    update?: XOR<XOR<InvestorUpdateToOneWithWhereWithoutPropertiesInput, InvestorUpdateWithoutPropertiesInput>, InvestorUncheckedUpdateWithoutPropertiesInput>
  }

  export type PropertyUpdateOneRequiredWithoutInvestorsNestedInput = {
    create?: XOR<PropertyCreateWithoutInvestorsInput, PropertyUncheckedCreateWithoutInvestorsInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutInvestorsInput
    upsert?: PropertyUpsertWithoutInvestorsInput
    connect?: PropertyWhereUniqueInput
    update?: XOR<XOR<PropertyUpdateToOneWithWhereWithoutInvestorsInput, PropertyUpdateWithoutInvestorsInput>, PropertyUncheckedUpdateWithoutInvestorsInput>
  }

  export type InvestorCreateNestedOneWithoutBookmarksInput = {
    create?: XOR<InvestorCreateWithoutBookmarksInput, InvestorUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: InvestorCreateOrConnectWithoutBookmarksInput
    connect?: InvestorWhereUniqueInput
  }

  export type PropertyCreateNestedOneWithoutBookmarksInput = {
    create?: XOR<PropertyCreateWithoutBookmarksInput, PropertyUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutBookmarksInput
    connect?: PropertyWhereUniqueInput
  }

  export type InvestorUpdateOneRequiredWithoutBookmarksNestedInput = {
    create?: XOR<InvestorCreateWithoutBookmarksInput, InvestorUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: InvestorCreateOrConnectWithoutBookmarksInput
    upsert?: InvestorUpsertWithoutBookmarksInput
    connect?: InvestorWhereUniqueInput
    update?: XOR<XOR<InvestorUpdateToOneWithWhereWithoutBookmarksInput, InvestorUpdateWithoutBookmarksInput>, InvestorUncheckedUpdateWithoutBookmarksInput>
  }

  export type PropertyUpdateOneRequiredWithoutBookmarksNestedInput = {
    create?: XOR<PropertyCreateWithoutBookmarksInput, PropertyUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: PropertyCreateOrConnectWithoutBookmarksInput
    upsert?: PropertyUpsertWithoutBookmarksInput
    connect?: PropertyWhereUniqueInput
    update?: XOR<XOR<PropertyUpdateToOneWithWhereWithoutBookmarksInput, PropertyUpdateWithoutBookmarksInput>, PropertyUncheckedUpdateWithoutBookmarksInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumAnnualIncomeRangeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.AnnualIncomeRange | EnumAnnualIncomeRangeFieldRefInput<$PrismaModel> | null
    in?: $Enums.AnnualIncomeRange[] | ListEnumAnnualIncomeRangeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AnnualIncomeRange[] | ListEnumAnnualIncomeRangeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAnnualIncomeRangeNullableFilter<$PrismaModel> | $Enums.AnnualIncomeRange | null
    isSet?: boolean
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumAnnualIncomeRangeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnnualIncomeRange | EnumAnnualIncomeRangeFieldRefInput<$PrismaModel> | null
    in?: $Enums.AnnualIncomeRange[] | ListEnumAnnualIncomeRangeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.AnnualIncomeRange[] | ListEnumAnnualIncomeRangeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumAnnualIncomeRangeNullableWithAggregatesFilter<$PrismaModel> | $Enums.AnnualIncomeRange | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumAnnualIncomeRangeNullableFilter<$PrismaModel>
    _max?: NestedEnumAnnualIncomeRangeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type PropertyInvestorCreateWithoutInvestorInput = {
    id?: string
    property: PropertyCreateNestedOneWithoutInvestorsInput
  }

  export type PropertyInvestorUncheckedCreateWithoutInvestorInput = {
    id?: string
    propertyId: string
  }

  export type PropertyInvestorCreateOrConnectWithoutInvestorInput = {
    where: PropertyInvestorWhereUniqueInput
    create: XOR<PropertyInvestorCreateWithoutInvestorInput, PropertyInvestorUncheckedCreateWithoutInvestorInput>
  }

  export type PropertyInvestorCreateManyInvestorInputEnvelope = {
    data: PropertyInvestorCreateManyInvestorInput | PropertyInvestorCreateManyInvestorInput[]
  }

  export type BookmarkCreateWithoutInvestorInput = {
    id?: string
    createdAt?: Date | string
    property: PropertyCreateNestedOneWithoutBookmarksInput
  }

  export type BookmarkUncheckedCreateWithoutInvestorInput = {
    id?: string
    propertyId: string
    createdAt?: Date | string
  }

  export type BookmarkCreateOrConnectWithoutInvestorInput = {
    where: BookmarkWhereUniqueInput
    create: XOR<BookmarkCreateWithoutInvestorInput, BookmarkUncheckedCreateWithoutInvestorInput>
  }

  export type BookmarkCreateManyInvestorInputEnvelope = {
    data: BookmarkCreateManyInvestorInput | BookmarkCreateManyInvestorInput[]
  }

  export type PropertyInvestorUpsertWithWhereUniqueWithoutInvestorInput = {
    where: PropertyInvestorWhereUniqueInput
    update: XOR<PropertyInvestorUpdateWithoutInvestorInput, PropertyInvestorUncheckedUpdateWithoutInvestorInput>
    create: XOR<PropertyInvestorCreateWithoutInvestorInput, PropertyInvestorUncheckedCreateWithoutInvestorInput>
  }

  export type PropertyInvestorUpdateWithWhereUniqueWithoutInvestorInput = {
    where: PropertyInvestorWhereUniqueInput
    data: XOR<PropertyInvestorUpdateWithoutInvestorInput, PropertyInvestorUncheckedUpdateWithoutInvestorInput>
  }

  export type PropertyInvestorUpdateManyWithWhereWithoutInvestorInput = {
    where: PropertyInvestorScalarWhereInput
    data: XOR<PropertyInvestorUpdateManyMutationInput, PropertyInvestorUncheckedUpdateManyWithoutInvestorInput>
  }

  export type PropertyInvestorScalarWhereInput = {
    AND?: PropertyInvestorScalarWhereInput | PropertyInvestorScalarWhereInput[]
    OR?: PropertyInvestorScalarWhereInput[]
    NOT?: PropertyInvestorScalarWhereInput | PropertyInvestorScalarWhereInput[]
    id?: StringFilter<"PropertyInvestor"> | string
    investorId?: StringFilter<"PropertyInvestor"> | string
    propertyId?: StringFilter<"PropertyInvestor"> | string
  }

  export type BookmarkUpsertWithWhereUniqueWithoutInvestorInput = {
    where: BookmarkWhereUniqueInput
    update: XOR<BookmarkUpdateWithoutInvestorInput, BookmarkUncheckedUpdateWithoutInvestorInput>
    create: XOR<BookmarkCreateWithoutInvestorInput, BookmarkUncheckedCreateWithoutInvestorInput>
  }

  export type BookmarkUpdateWithWhereUniqueWithoutInvestorInput = {
    where: BookmarkWhereUniqueInput
    data: XOR<BookmarkUpdateWithoutInvestorInput, BookmarkUncheckedUpdateWithoutInvestorInput>
  }

  export type BookmarkUpdateManyWithWhereWithoutInvestorInput = {
    where: BookmarkScalarWhereInput
    data: XOR<BookmarkUpdateManyMutationInput, BookmarkUncheckedUpdateManyWithoutInvestorInput>
  }

  export type BookmarkScalarWhereInput = {
    AND?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
    OR?: BookmarkScalarWhereInput[]
    NOT?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
    id?: StringFilter<"Bookmark"> | string
    investorId?: StringFilter<"Bookmark"> | string
    propertyId?: StringFilter<"Bookmark"> | string
    createdAt?: DateTimeFilter<"Bookmark"> | Date | string
  }

  export type PropertyInvestorCreateWithoutPropertyInput = {
    id?: string
    investor: InvestorCreateNestedOneWithoutPropertiesInput
  }

  export type PropertyInvestorUncheckedCreateWithoutPropertyInput = {
    id?: string
    investorId: string
  }

  export type PropertyInvestorCreateOrConnectWithoutPropertyInput = {
    where: PropertyInvestorWhereUniqueInput
    create: XOR<PropertyInvestorCreateWithoutPropertyInput, PropertyInvestorUncheckedCreateWithoutPropertyInput>
  }

  export type PropertyInvestorCreateManyPropertyInputEnvelope = {
    data: PropertyInvestorCreateManyPropertyInput | PropertyInvestorCreateManyPropertyInput[]
  }

  export type BookmarkCreateWithoutPropertyInput = {
    id?: string
    createdAt?: Date | string
    investor: InvestorCreateNestedOneWithoutBookmarksInput
  }

  export type BookmarkUncheckedCreateWithoutPropertyInput = {
    id?: string
    investorId: string
    createdAt?: Date | string
  }

  export type BookmarkCreateOrConnectWithoutPropertyInput = {
    where: BookmarkWhereUniqueInput
    create: XOR<BookmarkCreateWithoutPropertyInput, BookmarkUncheckedCreateWithoutPropertyInput>
  }

  export type BookmarkCreateManyPropertyInputEnvelope = {
    data: BookmarkCreateManyPropertyInput | BookmarkCreateManyPropertyInput[]
  }

  export type PropertyInvestorUpsertWithWhereUniqueWithoutPropertyInput = {
    where: PropertyInvestorWhereUniqueInput
    update: XOR<PropertyInvestorUpdateWithoutPropertyInput, PropertyInvestorUncheckedUpdateWithoutPropertyInput>
    create: XOR<PropertyInvestorCreateWithoutPropertyInput, PropertyInvestorUncheckedCreateWithoutPropertyInput>
  }

  export type PropertyInvestorUpdateWithWhereUniqueWithoutPropertyInput = {
    where: PropertyInvestorWhereUniqueInput
    data: XOR<PropertyInvestorUpdateWithoutPropertyInput, PropertyInvestorUncheckedUpdateWithoutPropertyInput>
  }

  export type PropertyInvestorUpdateManyWithWhereWithoutPropertyInput = {
    where: PropertyInvestorScalarWhereInput
    data: XOR<PropertyInvestorUpdateManyMutationInput, PropertyInvestorUncheckedUpdateManyWithoutPropertyInput>
  }

  export type BookmarkUpsertWithWhereUniqueWithoutPropertyInput = {
    where: BookmarkWhereUniqueInput
    update: XOR<BookmarkUpdateWithoutPropertyInput, BookmarkUncheckedUpdateWithoutPropertyInput>
    create: XOR<BookmarkCreateWithoutPropertyInput, BookmarkUncheckedCreateWithoutPropertyInput>
  }

  export type BookmarkUpdateWithWhereUniqueWithoutPropertyInput = {
    where: BookmarkWhereUniqueInput
    data: XOR<BookmarkUpdateWithoutPropertyInput, BookmarkUncheckedUpdateWithoutPropertyInput>
  }

  export type BookmarkUpdateManyWithWhereWithoutPropertyInput = {
    where: BookmarkScalarWhereInput
    data: XOR<BookmarkUpdateManyMutationInput, BookmarkUncheckedUpdateManyWithoutPropertyInput>
  }

  export type InvestorCreateWithoutPropertiesInput = {
    id?: string
    fullName: string
    emailId: string
    mobileNumber: string
    dateofBirth: Date | string
    password?: string | null
    emailVerified?: boolean
    phoneNumberVerified?: boolean
    selfieImagePath?: string | null
    addressImagePath?: string | null
    employmentImagePath?: string | null
    additionalDocumentImagePath?: string | null
    industry?: string | null
    organization?: string | null
    roleAtWork?: string | null
    workingDuration?: string | null
    incomeRange?: $Enums.AnnualIncomeRange | null
    profileUserImagePath?: string | null
    investmentPreference?: string | null
    addressOne?: string | null
    addressTwo?: string | null
    addressThree?: string | null
    pinCode?: string | null
    state?: string | null
    city?: string | null
    accountDeactivate?: boolean
    receiveNotification?: boolean
    payMentMethod?: string
    role: $Enums.Role
    fundsAvailable?: string
    expoPushToken?: string | null
    bookmarks?: BookmarkCreateNestedManyWithoutInvestorInput
  }

  export type InvestorUncheckedCreateWithoutPropertiesInput = {
    id?: string
    fullName: string
    emailId: string
    mobileNumber: string
    dateofBirth: Date | string
    password?: string | null
    emailVerified?: boolean
    phoneNumberVerified?: boolean
    selfieImagePath?: string | null
    addressImagePath?: string | null
    employmentImagePath?: string | null
    additionalDocumentImagePath?: string | null
    industry?: string | null
    organization?: string | null
    roleAtWork?: string | null
    workingDuration?: string | null
    incomeRange?: $Enums.AnnualIncomeRange | null
    profileUserImagePath?: string | null
    investmentPreference?: string | null
    addressOne?: string | null
    addressTwo?: string | null
    addressThree?: string | null
    pinCode?: string | null
    state?: string | null
    city?: string | null
    accountDeactivate?: boolean
    receiveNotification?: boolean
    payMentMethod?: string
    role: $Enums.Role
    fundsAvailable?: string
    expoPushToken?: string | null
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutInvestorInput
  }

  export type InvestorCreateOrConnectWithoutPropertiesInput = {
    where: InvestorWhereUniqueInput
    create: XOR<InvestorCreateWithoutPropertiesInput, InvestorUncheckedCreateWithoutPropertiesInput>
  }

  export type PropertyCreateWithoutInvestorsInput = {
    id?: string
    propertyName: string
    propertyLocation: string
    propertyImagePath: string
    propertyVideoPath?: string | null
    totalAssetValue: string
    totalAssetValueLeft: string
    totalToken: string
    ageGrowth?: number
    lockPeriod?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    amountInvestedByMe?: number
    aboutTotalAssetValue: string
    myTokenOnProperty?: number
    tokenLeft: string
    sharedType: string
    aboutSharedType: string
    holdingCompany: string
    aboutHoldingCompany: string
    aboutProperty: string
    propertyAmmenitiesImagePath: string
    titleDeedDocumentPath: string
    floorLayoutDocumentPath: string
    companyDetailsDocumentPath: string
    ownerShipDocumentPath: string
    otherDocumenthPath?: string | null
    faqs: string
    bookmarks?: BookmarkCreateNestedManyWithoutPropertyInput
  }

  export type PropertyUncheckedCreateWithoutInvestorsInput = {
    id?: string
    propertyName: string
    propertyLocation: string
    propertyImagePath: string
    propertyVideoPath?: string | null
    totalAssetValue: string
    totalAssetValueLeft: string
    totalToken: string
    ageGrowth?: number
    lockPeriod?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    amountInvestedByMe?: number
    aboutTotalAssetValue: string
    myTokenOnProperty?: number
    tokenLeft: string
    sharedType: string
    aboutSharedType: string
    holdingCompany: string
    aboutHoldingCompany: string
    aboutProperty: string
    propertyAmmenitiesImagePath: string
    titleDeedDocumentPath: string
    floorLayoutDocumentPath: string
    companyDetailsDocumentPath: string
    ownerShipDocumentPath: string
    otherDocumenthPath?: string | null
    faqs: string
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutInvestorsInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutInvestorsInput, PropertyUncheckedCreateWithoutInvestorsInput>
  }

  export type InvestorUpsertWithoutPropertiesInput = {
    update: XOR<InvestorUpdateWithoutPropertiesInput, InvestorUncheckedUpdateWithoutPropertiesInput>
    create: XOR<InvestorCreateWithoutPropertiesInput, InvestorUncheckedCreateWithoutPropertiesInput>
    where?: InvestorWhereInput
  }

  export type InvestorUpdateToOneWithWhereWithoutPropertiesInput = {
    where?: InvestorWhereInput
    data: XOR<InvestorUpdateWithoutPropertiesInput, InvestorUncheckedUpdateWithoutPropertiesInput>
  }

  export type InvestorUpdateWithoutPropertiesInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    dateofBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumberVerified?: BoolFieldUpdateOperationsInput | boolean
    selfieImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    addressImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    employmentImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    additionalDocumentImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    roleAtWork?: NullableStringFieldUpdateOperationsInput | string | null
    workingDuration?: NullableStringFieldUpdateOperationsInput | string | null
    incomeRange?: NullableEnumAnnualIncomeRangeFieldUpdateOperationsInput | $Enums.AnnualIncomeRange | null
    profileUserImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    investmentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    addressOne?: NullableStringFieldUpdateOperationsInput | string | null
    addressTwo?: NullableStringFieldUpdateOperationsInput | string | null
    addressThree?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    accountDeactivate?: BoolFieldUpdateOperationsInput | boolean
    receiveNotification?: BoolFieldUpdateOperationsInput | boolean
    payMentMethod?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    fundsAvailable?: StringFieldUpdateOperationsInput | string
    expoPushToken?: NullableStringFieldUpdateOperationsInput | string | null
    bookmarks?: BookmarkUpdateManyWithoutInvestorNestedInput
  }

  export type InvestorUncheckedUpdateWithoutPropertiesInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    dateofBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumberVerified?: BoolFieldUpdateOperationsInput | boolean
    selfieImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    addressImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    employmentImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    additionalDocumentImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    roleAtWork?: NullableStringFieldUpdateOperationsInput | string | null
    workingDuration?: NullableStringFieldUpdateOperationsInput | string | null
    incomeRange?: NullableEnumAnnualIncomeRangeFieldUpdateOperationsInput | $Enums.AnnualIncomeRange | null
    profileUserImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    investmentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    addressOne?: NullableStringFieldUpdateOperationsInput | string | null
    addressTwo?: NullableStringFieldUpdateOperationsInput | string | null
    addressThree?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    accountDeactivate?: BoolFieldUpdateOperationsInput | boolean
    receiveNotification?: BoolFieldUpdateOperationsInput | boolean
    payMentMethod?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    fundsAvailable?: StringFieldUpdateOperationsInput | string
    expoPushToken?: NullableStringFieldUpdateOperationsInput | string | null
    bookmarks?: BookmarkUncheckedUpdateManyWithoutInvestorNestedInput
  }

  export type PropertyUpsertWithoutInvestorsInput = {
    update: XOR<PropertyUpdateWithoutInvestorsInput, PropertyUncheckedUpdateWithoutInvestorsInput>
    create: XOR<PropertyCreateWithoutInvestorsInput, PropertyUncheckedCreateWithoutInvestorsInput>
    where?: PropertyWhereInput
  }

  export type PropertyUpdateToOneWithWhereWithoutInvestorsInput = {
    where?: PropertyWhereInput
    data: XOR<PropertyUpdateWithoutInvestorsInput, PropertyUncheckedUpdateWithoutInvestorsInput>
  }

  export type PropertyUpdateWithoutInvestorsInput = {
    propertyName?: StringFieldUpdateOperationsInput | string
    propertyLocation?: StringFieldUpdateOperationsInput | string
    propertyImagePath?: StringFieldUpdateOperationsInput | string
    propertyVideoPath?: NullableStringFieldUpdateOperationsInput | string | null
    totalAssetValue?: StringFieldUpdateOperationsInput | string
    totalAssetValueLeft?: StringFieldUpdateOperationsInput | string
    totalToken?: StringFieldUpdateOperationsInput | string
    ageGrowth?: FloatFieldUpdateOperationsInput | number
    lockPeriod?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amountInvestedByMe?: FloatFieldUpdateOperationsInput | number
    aboutTotalAssetValue?: StringFieldUpdateOperationsInput | string
    myTokenOnProperty?: FloatFieldUpdateOperationsInput | number
    tokenLeft?: StringFieldUpdateOperationsInput | string
    sharedType?: StringFieldUpdateOperationsInput | string
    aboutSharedType?: StringFieldUpdateOperationsInput | string
    holdingCompany?: StringFieldUpdateOperationsInput | string
    aboutHoldingCompany?: StringFieldUpdateOperationsInput | string
    aboutProperty?: StringFieldUpdateOperationsInput | string
    propertyAmmenitiesImagePath?: StringFieldUpdateOperationsInput | string
    titleDeedDocumentPath?: StringFieldUpdateOperationsInput | string
    floorLayoutDocumentPath?: StringFieldUpdateOperationsInput | string
    companyDetailsDocumentPath?: StringFieldUpdateOperationsInput | string
    ownerShipDocumentPath?: StringFieldUpdateOperationsInput | string
    otherDocumenthPath?: NullableStringFieldUpdateOperationsInput | string | null
    faqs?: StringFieldUpdateOperationsInput | string
    bookmarks?: BookmarkUpdateManyWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateWithoutInvestorsInput = {
    propertyName?: StringFieldUpdateOperationsInput | string
    propertyLocation?: StringFieldUpdateOperationsInput | string
    propertyImagePath?: StringFieldUpdateOperationsInput | string
    propertyVideoPath?: NullableStringFieldUpdateOperationsInput | string | null
    totalAssetValue?: StringFieldUpdateOperationsInput | string
    totalAssetValueLeft?: StringFieldUpdateOperationsInput | string
    totalToken?: StringFieldUpdateOperationsInput | string
    ageGrowth?: FloatFieldUpdateOperationsInput | number
    lockPeriod?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amountInvestedByMe?: FloatFieldUpdateOperationsInput | number
    aboutTotalAssetValue?: StringFieldUpdateOperationsInput | string
    myTokenOnProperty?: FloatFieldUpdateOperationsInput | number
    tokenLeft?: StringFieldUpdateOperationsInput | string
    sharedType?: StringFieldUpdateOperationsInput | string
    aboutSharedType?: StringFieldUpdateOperationsInput | string
    holdingCompany?: StringFieldUpdateOperationsInput | string
    aboutHoldingCompany?: StringFieldUpdateOperationsInput | string
    aboutProperty?: StringFieldUpdateOperationsInput | string
    propertyAmmenitiesImagePath?: StringFieldUpdateOperationsInput | string
    titleDeedDocumentPath?: StringFieldUpdateOperationsInput | string
    floorLayoutDocumentPath?: StringFieldUpdateOperationsInput | string
    companyDetailsDocumentPath?: StringFieldUpdateOperationsInput | string
    ownerShipDocumentPath?: StringFieldUpdateOperationsInput | string
    otherDocumenthPath?: NullableStringFieldUpdateOperationsInput | string | null
    faqs?: StringFieldUpdateOperationsInput | string
    bookmarks?: BookmarkUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type InvestorCreateWithoutBookmarksInput = {
    id?: string
    fullName: string
    emailId: string
    mobileNumber: string
    dateofBirth: Date | string
    password?: string | null
    emailVerified?: boolean
    phoneNumberVerified?: boolean
    selfieImagePath?: string | null
    addressImagePath?: string | null
    employmentImagePath?: string | null
    additionalDocumentImagePath?: string | null
    industry?: string | null
    organization?: string | null
    roleAtWork?: string | null
    workingDuration?: string | null
    incomeRange?: $Enums.AnnualIncomeRange | null
    profileUserImagePath?: string | null
    investmentPreference?: string | null
    addressOne?: string | null
    addressTwo?: string | null
    addressThree?: string | null
    pinCode?: string | null
    state?: string | null
    city?: string | null
    accountDeactivate?: boolean
    receiveNotification?: boolean
    payMentMethod?: string
    role: $Enums.Role
    fundsAvailable?: string
    expoPushToken?: string | null
    properties?: PropertyInvestorCreateNestedManyWithoutInvestorInput
  }

  export type InvestorUncheckedCreateWithoutBookmarksInput = {
    id?: string
    fullName: string
    emailId: string
    mobileNumber: string
    dateofBirth: Date | string
    password?: string | null
    emailVerified?: boolean
    phoneNumberVerified?: boolean
    selfieImagePath?: string | null
    addressImagePath?: string | null
    employmentImagePath?: string | null
    additionalDocumentImagePath?: string | null
    industry?: string | null
    organization?: string | null
    roleAtWork?: string | null
    workingDuration?: string | null
    incomeRange?: $Enums.AnnualIncomeRange | null
    profileUserImagePath?: string | null
    investmentPreference?: string | null
    addressOne?: string | null
    addressTwo?: string | null
    addressThree?: string | null
    pinCode?: string | null
    state?: string | null
    city?: string | null
    accountDeactivate?: boolean
    receiveNotification?: boolean
    payMentMethod?: string
    role: $Enums.Role
    fundsAvailable?: string
    expoPushToken?: string | null
    properties?: PropertyInvestorUncheckedCreateNestedManyWithoutInvestorInput
  }

  export type InvestorCreateOrConnectWithoutBookmarksInput = {
    where: InvestorWhereUniqueInput
    create: XOR<InvestorCreateWithoutBookmarksInput, InvestorUncheckedCreateWithoutBookmarksInput>
  }

  export type PropertyCreateWithoutBookmarksInput = {
    id?: string
    propertyName: string
    propertyLocation: string
    propertyImagePath: string
    propertyVideoPath?: string | null
    totalAssetValue: string
    totalAssetValueLeft: string
    totalToken: string
    ageGrowth?: number
    lockPeriod?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    amountInvestedByMe?: number
    aboutTotalAssetValue: string
    myTokenOnProperty?: number
    tokenLeft: string
    sharedType: string
    aboutSharedType: string
    holdingCompany: string
    aboutHoldingCompany: string
    aboutProperty: string
    propertyAmmenitiesImagePath: string
    titleDeedDocumentPath: string
    floorLayoutDocumentPath: string
    companyDetailsDocumentPath: string
    ownerShipDocumentPath: string
    otherDocumenthPath?: string | null
    faqs: string
    investors?: PropertyInvestorCreateNestedManyWithoutPropertyInput
  }

  export type PropertyUncheckedCreateWithoutBookmarksInput = {
    id?: string
    propertyName: string
    propertyLocation: string
    propertyImagePath: string
    propertyVideoPath?: string | null
    totalAssetValue: string
    totalAssetValueLeft: string
    totalToken: string
    ageGrowth?: number
    lockPeriod?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    amountInvestedByMe?: number
    aboutTotalAssetValue: string
    myTokenOnProperty?: number
    tokenLeft: string
    sharedType: string
    aboutSharedType: string
    holdingCompany: string
    aboutHoldingCompany: string
    aboutProperty: string
    propertyAmmenitiesImagePath: string
    titleDeedDocumentPath: string
    floorLayoutDocumentPath: string
    companyDetailsDocumentPath: string
    ownerShipDocumentPath: string
    otherDocumenthPath?: string | null
    faqs: string
    investors?: PropertyInvestorUncheckedCreateNestedManyWithoutPropertyInput
  }

  export type PropertyCreateOrConnectWithoutBookmarksInput = {
    where: PropertyWhereUniqueInput
    create: XOR<PropertyCreateWithoutBookmarksInput, PropertyUncheckedCreateWithoutBookmarksInput>
  }

  export type InvestorUpsertWithoutBookmarksInput = {
    update: XOR<InvestorUpdateWithoutBookmarksInput, InvestorUncheckedUpdateWithoutBookmarksInput>
    create: XOR<InvestorCreateWithoutBookmarksInput, InvestorUncheckedCreateWithoutBookmarksInput>
    where?: InvestorWhereInput
  }

  export type InvestorUpdateToOneWithWhereWithoutBookmarksInput = {
    where?: InvestorWhereInput
    data: XOR<InvestorUpdateWithoutBookmarksInput, InvestorUncheckedUpdateWithoutBookmarksInput>
  }

  export type InvestorUpdateWithoutBookmarksInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    dateofBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumberVerified?: BoolFieldUpdateOperationsInput | boolean
    selfieImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    addressImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    employmentImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    additionalDocumentImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    roleAtWork?: NullableStringFieldUpdateOperationsInput | string | null
    workingDuration?: NullableStringFieldUpdateOperationsInput | string | null
    incomeRange?: NullableEnumAnnualIncomeRangeFieldUpdateOperationsInput | $Enums.AnnualIncomeRange | null
    profileUserImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    investmentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    addressOne?: NullableStringFieldUpdateOperationsInput | string | null
    addressTwo?: NullableStringFieldUpdateOperationsInput | string | null
    addressThree?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    accountDeactivate?: BoolFieldUpdateOperationsInput | boolean
    receiveNotification?: BoolFieldUpdateOperationsInput | boolean
    payMentMethod?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    fundsAvailable?: StringFieldUpdateOperationsInput | string
    expoPushToken?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: PropertyInvestorUpdateManyWithoutInvestorNestedInput
  }

  export type InvestorUncheckedUpdateWithoutBookmarksInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    mobileNumber?: StringFieldUpdateOperationsInput | string
    dateofBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    phoneNumberVerified?: BoolFieldUpdateOperationsInput | boolean
    selfieImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    addressImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    employmentImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    additionalDocumentImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: NullableStringFieldUpdateOperationsInput | string | null
    roleAtWork?: NullableStringFieldUpdateOperationsInput | string | null
    workingDuration?: NullableStringFieldUpdateOperationsInput | string | null
    incomeRange?: NullableEnumAnnualIncomeRangeFieldUpdateOperationsInput | $Enums.AnnualIncomeRange | null
    profileUserImagePath?: NullableStringFieldUpdateOperationsInput | string | null
    investmentPreference?: NullableStringFieldUpdateOperationsInput | string | null
    addressOne?: NullableStringFieldUpdateOperationsInput | string | null
    addressTwo?: NullableStringFieldUpdateOperationsInput | string | null
    addressThree?: NullableStringFieldUpdateOperationsInput | string | null
    pinCode?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    accountDeactivate?: BoolFieldUpdateOperationsInput | boolean
    receiveNotification?: BoolFieldUpdateOperationsInput | boolean
    payMentMethod?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    fundsAvailable?: StringFieldUpdateOperationsInput | string
    expoPushToken?: NullableStringFieldUpdateOperationsInput | string | null
    properties?: PropertyInvestorUncheckedUpdateManyWithoutInvestorNestedInput
  }

  export type PropertyUpsertWithoutBookmarksInput = {
    update: XOR<PropertyUpdateWithoutBookmarksInput, PropertyUncheckedUpdateWithoutBookmarksInput>
    create: XOR<PropertyCreateWithoutBookmarksInput, PropertyUncheckedCreateWithoutBookmarksInput>
    where?: PropertyWhereInput
  }

  export type PropertyUpdateToOneWithWhereWithoutBookmarksInput = {
    where?: PropertyWhereInput
    data: XOR<PropertyUpdateWithoutBookmarksInput, PropertyUncheckedUpdateWithoutBookmarksInput>
  }

  export type PropertyUpdateWithoutBookmarksInput = {
    propertyName?: StringFieldUpdateOperationsInput | string
    propertyLocation?: StringFieldUpdateOperationsInput | string
    propertyImagePath?: StringFieldUpdateOperationsInput | string
    propertyVideoPath?: NullableStringFieldUpdateOperationsInput | string | null
    totalAssetValue?: StringFieldUpdateOperationsInput | string
    totalAssetValueLeft?: StringFieldUpdateOperationsInput | string
    totalToken?: StringFieldUpdateOperationsInput | string
    ageGrowth?: FloatFieldUpdateOperationsInput | number
    lockPeriod?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amountInvestedByMe?: FloatFieldUpdateOperationsInput | number
    aboutTotalAssetValue?: StringFieldUpdateOperationsInput | string
    myTokenOnProperty?: FloatFieldUpdateOperationsInput | number
    tokenLeft?: StringFieldUpdateOperationsInput | string
    sharedType?: StringFieldUpdateOperationsInput | string
    aboutSharedType?: StringFieldUpdateOperationsInput | string
    holdingCompany?: StringFieldUpdateOperationsInput | string
    aboutHoldingCompany?: StringFieldUpdateOperationsInput | string
    aboutProperty?: StringFieldUpdateOperationsInput | string
    propertyAmmenitiesImagePath?: StringFieldUpdateOperationsInput | string
    titleDeedDocumentPath?: StringFieldUpdateOperationsInput | string
    floorLayoutDocumentPath?: StringFieldUpdateOperationsInput | string
    companyDetailsDocumentPath?: StringFieldUpdateOperationsInput | string
    ownerShipDocumentPath?: StringFieldUpdateOperationsInput | string
    otherDocumenthPath?: NullableStringFieldUpdateOperationsInput | string | null
    faqs?: StringFieldUpdateOperationsInput | string
    investors?: PropertyInvestorUpdateManyWithoutPropertyNestedInput
  }

  export type PropertyUncheckedUpdateWithoutBookmarksInput = {
    propertyName?: StringFieldUpdateOperationsInput | string
    propertyLocation?: StringFieldUpdateOperationsInput | string
    propertyImagePath?: StringFieldUpdateOperationsInput | string
    propertyVideoPath?: NullableStringFieldUpdateOperationsInput | string | null
    totalAssetValue?: StringFieldUpdateOperationsInput | string
    totalAssetValueLeft?: StringFieldUpdateOperationsInput | string
    totalToken?: StringFieldUpdateOperationsInput | string
    ageGrowth?: FloatFieldUpdateOperationsInput | number
    lockPeriod?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amountInvestedByMe?: FloatFieldUpdateOperationsInput | number
    aboutTotalAssetValue?: StringFieldUpdateOperationsInput | string
    myTokenOnProperty?: FloatFieldUpdateOperationsInput | number
    tokenLeft?: StringFieldUpdateOperationsInput | string
    sharedType?: StringFieldUpdateOperationsInput | string
    aboutSharedType?: StringFieldUpdateOperationsInput | string
    holdingCompany?: StringFieldUpdateOperationsInput | string
    aboutHoldingCompany?: StringFieldUpdateOperationsInput | string
    aboutProperty?: StringFieldUpdateOperationsInput | string
    propertyAmmenitiesImagePath?: StringFieldUpdateOperationsInput | string
    titleDeedDocumentPath?: StringFieldUpdateOperationsInput | string
    floorLayoutDocumentPath?: StringFieldUpdateOperationsInput | string
    companyDetailsDocumentPath?: StringFieldUpdateOperationsInput | string
    ownerShipDocumentPath?: StringFieldUpdateOperationsInput | string
    otherDocumenthPath?: NullableStringFieldUpdateOperationsInput | string | null
    faqs?: StringFieldUpdateOperationsInput | string
    investors?: PropertyInvestorUncheckedUpdateManyWithoutPropertyNestedInput
  }

  export type PropertyInvestorCreateManyInvestorInput = {
    id?: string
    propertyId: string
  }

  export type BookmarkCreateManyInvestorInput = {
    id?: string
    propertyId: string
    createdAt?: Date | string
  }

  export type PropertyInvestorUpdateWithoutInvestorInput = {
    property?: PropertyUpdateOneRequiredWithoutInvestorsNestedInput
  }

  export type PropertyInvestorUncheckedUpdateWithoutInvestorInput = {
    propertyId?: StringFieldUpdateOperationsInput | string
  }

  export type PropertyInvestorUncheckedUpdateManyWithoutInvestorInput = {
    propertyId?: StringFieldUpdateOperationsInput | string
  }

  export type BookmarkUpdateWithoutInvestorInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    property?: PropertyUpdateOneRequiredWithoutBookmarksNestedInput
  }

  export type BookmarkUncheckedUpdateWithoutInvestorInput = {
    propertyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkUncheckedUpdateManyWithoutInvestorInput = {
    propertyId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PropertyInvestorCreateManyPropertyInput = {
    id?: string
    investorId: string
  }

  export type BookmarkCreateManyPropertyInput = {
    id?: string
    investorId: string
    createdAt?: Date | string
  }

  export type PropertyInvestorUpdateWithoutPropertyInput = {
    investor?: InvestorUpdateOneRequiredWithoutPropertiesNestedInput
  }

  export type PropertyInvestorUncheckedUpdateWithoutPropertyInput = {
    investorId?: StringFieldUpdateOperationsInput | string
  }

  export type PropertyInvestorUncheckedUpdateManyWithoutPropertyInput = {
    investorId?: StringFieldUpdateOperationsInput | string
  }

  export type BookmarkUpdateWithoutPropertyInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    investor?: InvestorUpdateOneRequiredWithoutBookmarksNestedInput
  }

  export type BookmarkUncheckedUpdateWithoutPropertyInput = {
    investorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookmarkUncheckedUpdateManyWithoutPropertyInput = {
    investorId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use InvestorCountOutputTypeDefaultArgs instead
     */
    export type InvestorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvestorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PropertyCountOutputTypeDefaultArgs instead
     */
    export type PropertyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PropertyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InvestorDefaultArgs instead
     */
    export type InvestorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InvestorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminDefaultArgs instead
     */
    export type AdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PropertyDefaultArgs instead
     */
    export type PropertyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PropertyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PropertyInvestorDefaultArgs instead
     */
    export type PropertyInvestorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PropertyInvestorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BookmarkDefaultArgs instead
     */
    export type BookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BookmarkDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}